/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.flight.union_searchflightsws.v1;

import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RouteSearchControlType", propOrder = {
    "routeSearchMode",
    "routeSearchToken",
    "origDestSeqID"
})
@SuppressWarnings("all")
public class RouteSearchControlType  {

    private static final long serialVersionUID = 1L;

    public RouteSearchControlType(
        String routeSearchMode, 
        String routeSearchToken, 
        int origDestSeqID) {
        this.routeSearchMode = routeSearchMode;
        this.routeSearchToken = routeSearchToken;
        this.origDestSeqID = origDestSeqID;
    }

    public RouteSearchControlType() {
    }

    @JsonProperty("RouteSearchMode")
    @XmlElement(name = "RouteSearchMode")
    private String routeSearchMode;

    @FieldDoc("Complete route (flight/class) corresponding to selected product and price")
    @JsonProperty("RouteSearchToken")
    @XmlElement(name = "RouteSearchToken")
    private String routeSearchToken;

    @FieldDoc("Segment sequence number (one-way is 1, round-trip is 1-2, connecting flight by this analogy)")
    @JsonProperty("OrigDestSeqID")
    @XmlElement(name = "OrigDestSeqID")
    private int origDestSeqID;

    public String getRouteSearchMode() {
        return this.routeSearchMode;
    }

    public void setRouteSearchMode(String routeSearchMode) {
        this.routeSearchMode = routeSearchMode;
    }

    /**
     * Complete route (flight/class) corresponding to selected product and price
     */
    public String getRouteSearchToken() {
        return this.routeSearchToken;
    }

    public void setRouteSearchToken(String routeSearchToken) {
        this.routeSearchToken = routeSearchToken;
    }

    /**
     * Segment sequence number (one-way is 1, round-trip is 1-2, connecting flight by this analogy)
     */
    public int getOrigDestSeqID() {
        return this.origDestSeqID;
    }

    public void setOrigDestSeqID(int origDestSeqID) {
        this.origDestSeqID = origDestSeqID;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final RouteSearchControlType other = (RouteSearchControlType)obj;
        return
            Objects.equal(this.routeSearchMode, other.routeSearchMode) && 
            Objects.equal(this.routeSearchToken, other.routeSearchToken) && 
            Objects.equal(this.origDestSeqID, other.origDestSeqID);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.routeSearchMode);
        result = 31 * result + Objects.hashCode(this.routeSearchToken);
        result = 31 * result + Objects.hashCode(this.origDestSeqID);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("routeSearchMode", routeSearchMode)
            .add("routeSearchToken", routeSearchToken)
            .add("origDestSeqID", origDestSeqID)
            .toString();
    }
}