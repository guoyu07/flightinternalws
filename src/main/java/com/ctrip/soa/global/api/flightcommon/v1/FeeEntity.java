/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.flightcommon.v1;

import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 退票费用详情
 */
@DtoDoc("退票费用详情")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FeeEntity", propOrder = {
    "windowBeginHour",
    "windowEndHour",
    "feeAmount",
    "currency",
    "sequence",
    "timeText",
    "specialText",
    "specialType",
    "conCurrentRule",
    "concurrentDescription",
    "isActive"
})
@SuppressWarnings("all")
public class FeeEntity  {

    private static final long serialVersionUID = 1L;

    public FeeEntity(
        int windowBeginHour, 
        int windowEndHour, 
        BigDecimal feeAmount, 
        String currency, 
        int sequence, 
        String timeText, 
        String specialText, 
        int specialType, 
        int conCurrentRule, 
        String concurrentDescription, 
        boolean isActive) {
        this.windowBeginHour = windowBeginHour;
        this.windowEndHour = windowEndHour;
        this.feeAmount = feeAmount;
        this.currency = currency;
        this.sequence = sequence;
        this.timeText = timeText;
        this.specialText = specialText;
        this.specialType = specialType;
        this.conCurrentRule = conCurrentRule;
        this.concurrentDescription = concurrentDescription;
        this.isActive = isActive;
    }

    public FeeEntity() {
    }

    @FieldDoc("时间开始，如果是  -2  起飞后2小时前， 2是起飞前2小时前，客户端可不使用")
    @JsonProperty("WindowBeginHour")
    @XmlElement(name = "WindowBeginHour")
    private int windowBeginHour;

    @FieldDoc("时间结束，如果6 起飞后6小时后， -6是起飞后2小时后，客户端可不使用")
    @JsonProperty("WindowEndHour")
    @XmlElement(name = "WindowEndHour")
    private int windowEndHour;

    @FieldDoc("费用总额")
    @JsonProperty("FeeAmount")
    @XmlElement(name = "FeeAmount")
    private BigDecimal feeAmount;

    @FieldDoc("货币类型")
    @JsonProperty("Currency")
    @XmlElement(name = "Currency")
    private String currency;

    @FieldDoc("序号 ，国内的从1开始依次递增。 国际单程从1开始递增，往返的情况，对于去程从1开始，对于返程从101开始")
    @JsonProperty("Sequence")
    @XmlElement(name = "Sequence")
    private int sequence;

    @FieldDoc("时间段描述，如起飞前，起飞后之类")
    @JsonProperty("TimeText")
    @XmlElement(name = "TimeText")
    private String timeText;

    @FieldDoc("特殊类型说明，赋值如 free, non-refundable,non-changeable之类的字段")
    @JsonProperty("SpecialText")
    @XmlElement(name = "SpecialText")
    private String specialText;

    @FieldDoc("特殊类型，int型字段，1代表text中是free,2代表是non- ，0是普通的情况")
    @JsonProperty("SpecialType")
    @XmlElement(name = "SpecialType")
    private int specialType;

    @FieldDoc("改签升舱同时发生，收费规则")
    @JsonProperty("ConCurrentRule")
    @XmlElement(name = "ConCurrentRule")
    private int conCurrentRule;

    @FieldDoc("改签与升舱同时发生费用描述")
    @JsonProperty("ConcurrentDescription")
    @XmlElement(name = "ConcurrentDescription")
    private String concurrentDescription;

    @FieldDoc("是否当前规则激活")
    @JsonProperty("IsActive")
    @XmlElement(name = "IsActive")
    private boolean isActive;

    /**
     * 时间开始，如果是  -2  起飞后2小时前， 2是起飞前2小时前，客户端可不使用
     */
    public int getWindowBeginHour() {
        return this.windowBeginHour;
    }

    public void setWindowBeginHour(int windowBeginHour) {
        this.windowBeginHour = windowBeginHour;
    }

    /**
     * 时间结束，如果6 起飞后6小时后， -6是起飞后2小时后，客户端可不使用
     */
    public int getWindowEndHour() {
        return this.windowEndHour;
    }

    public void setWindowEndHour(int windowEndHour) {
        this.windowEndHour = windowEndHour;
    }

    /**
     * 费用总额
     */
    public BigDecimal getFeeAmount() {
        return this.feeAmount;
    }

    public void setFeeAmount(BigDecimal feeAmount) {
        this.feeAmount = feeAmount;
    }

    /**
     * 货币类型
     */
    public String getCurrency() {
        return this.currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    /**
     * 序号 ，国内的从1开始依次递增。 国际单程从1开始递增，往返的情况，对于去程从1开始，对于返程从101开始
     */
    public int getSequence() {
        return this.sequence;
    }

    public void setSequence(int sequence) {
        this.sequence = sequence;
    }

    /**
     * 时间段描述，如起飞前，起飞后之类
     */
    public String getTimeText() {
        return this.timeText;
    }

    public void setTimeText(String timeText) {
        this.timeText = timeText;
    }

    /**
     * 特殊类型说明，赋值如 free, non-refundable,non-changeable之类的字段
     */
    public String getSpecialText() {
        return this.specialText;
    }

    public void setSpecialText(String specialText) {
        this.specialText = specialText;
    }

    /**
     * 特殊类型，int型字段，1代表text中是free,2代表是non- ，0是普通的情况
     */
    public int getSpecialType() {
        return this.specialType;
    }

    public void setSpecialType(int specialType) {
        this.specialType = specialType;
    }

    /**
     * 改签升舱同时发生，收费规则
     */
    public int getConCurrentRule() {
        return this.conCurrentRule;
    }

    public void setConCurrentRule(int conCurrentRule) {
        this.conCurrentRule = conCurrentRule;
    }

    /**
     * 改签与升舱同时发生费用描述
     */
    public String getConcurrentDescription() {
        return this.concurrentDescription;
    }

    public void setConcurrentDescription(String concurrentDescription) {
        this.concurrentDescription = concurrentDescription;
    }

    /**
     * 是否当前规则激活
     */
    public boolean getIsActive() {
        return this.isActive;
    }

    public void setIsActive(boolean isActive) {
        this.isActive = isActive;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final FeeEntity other = (FeeEntity)obj;
        return
            Objects.equal(this.windowBeginHour, other.windowBeginHour) && 
            Objects.equal(this.windowEndHour, other.windowEndHour) && 
            Objects.equal(this.feeAmount, other.feeAmount) && 
            Objects.equal(this.currency, other.currency) && 
            Objects.equal(this.sequence, other.sequence) && 
            Objects.equal(this.timeText, other.timeText) && 
            Objects.equal(this.specialText, other.specialText) && 
            Objects.equal(this.specialType, other.specialType) && 
            Objects.equal(this.conCurrentRule, other.conCurrentRule) && 
            Objects.equal(this.concurrentDescription, other.concurrentDescription) && 
            Objects.equal(this.isActive, other.isActive);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.windowBeginHour);
        result = 31 * result + Objects.hashCode(this.windowEndHour);
        result = 31 * result + Objects.hashCode(this.feeAmount);
        result = 31 * result + Objects.hashCode(this.currency);
        result = 31 * result + Objects.hashCode(this.sequence);
        result = 31 * result + Objects.hashCode(this.timeText);
        result = 31 * result + Objects.hashCode(this.specialText);
        result = 31 * result + Objects.hashCode(this.specialType);
        result = 31 * result + Objects.hashCode(this.conCurrentRule);
        result = 31 * result + Objects.hashCode(this.concurrentDescription);
        result = 31 * result + Objects.hashCode(this.isActive);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("windowBeginHour", windowBeginHour)
            .add("windowEndHour", windowEndHour)
            .add("feeAmount", feeAmount)
            .add("currency", currency)
            .add("sequence", sequence)
            .add("timeText", timeText)
            .add("specialText", specialText)
            .add("specialType", specialType)
            .add("conCurrentRule", conCurrentRule)
            .add("concurrentDescription", concurrentDescription)
            .add("isActive", isActive)
            .toString();
    }
}