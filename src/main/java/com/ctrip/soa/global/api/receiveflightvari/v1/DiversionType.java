/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.receiveflightvari.v1;

import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 备降信息
 */
@DtoDoc("备降信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DiversionType", propOrder = {
    "airportCode",
    "cityCode"
})
@SuppressWarnings("all")
public class DiversionType  {

    private static final long serialVersionUID = 1L;

    public DiversionType(
        String airportCode, 
        String cityCode) {
        this.airportCode = airportCode;
        this.cityCode = cityCode;
    }

    public DiversionType() {
    }

    @FieldDoc("备降机场三字码" +
"若状态为备降时，该字段不能为空")
    @JsonProperty("AirportCode")
    @XmlElement(name = "AirportCode")
    private String airportCode;

    @FieldDoc("备降城市三字码" +
"若状态为备降时，该字段不能为空")
    @JsonProperty("CityCode")
    @XmlElement(name = "CityCode")
    private String cityCode;

    /**
     * 备降机场三字码
     * 若状态为备降时，该字段不能为空
     */
    public String getAirportCode() {
        return this.airportCode;
    }

    public void setAirportCode(String airportCode) {
        this.airportCode = airportCode;
    }

    /**
     * 备降城市三字码
     * 若状态为备降时，该字段不能为空
     */
    public String getCityCode() {
        return this.cityCode;
    }

    public void setCityCode(String cityCode) {
        this.cityCode = cityCode;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final DiversionType other = (DiversionType)obj;
        return
            Objects.equal(this.airportCode, other.airportCode) && 
            Objects.equal(this.cityCode, other.cityCode);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.airportCode);
        result = 31 * result + Objects.hashCode(this.cityCode);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("airportCode", airportCode)
            .add("cityCode", cityCode)
            .toString();
    }
}