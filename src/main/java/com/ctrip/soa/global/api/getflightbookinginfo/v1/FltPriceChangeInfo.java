/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.getflightbookinginfo.v1;

import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 变价信息
 */
@DtoDoc("变价信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FltPriceChangeInfo", propOrder = {
    "originalPrice",
    "newPrice"
})
@SuppressWarnings("all")
public class FltPriceChangeInfo  {

    private static final long serialVersionUID = 1L;

    public FltPriceChangeInfo(
        BigDecimal originalPrice, 
        BigDecimal newPrice) {
        this.originalPrice = originalPrice;
        this.newPrice = newPrice;
    }

    public FltPriceChangeInfo() {
    }

    @FieldDoc("原始价格")
    @JsonProperty("OriginalPrice")
    @XmlElement(name = "OriginalPrice")
    private BigDecimal originalPrice;

    @FieldDoc("最新价")
    @JsonProperty("NewPrice")
    @XmlElement(name = "NewPrice")
    private BigDecimal newPrice;

    /**
     * 原始价格
     */
    public BigDecimal getOriginalPrice() {
        return this.originalPrice;
    }

    public void setOriginalPrice(BigDecimal originalPrice) {
        this.originalPrice = originalPrice;
    }

    /**
     * 最新价
     */
    public BigDecimal getNewPrice() {
        return this.newPrice;
    }

    public void setNewPrice(BigDecimal newPrice) {
        this.newPrice = newPrice;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final FltPriceChangeInfo other = (FltPriceChangeInfo)obj;
        return
            Objects.equal(this.originalPrice, other.originalPrice) && 
            Objects.equal(this.newPrice, other.newPrice);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.originalPrice);
        result = 31 * result + Objects.hashCode(this.newPrice);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("originalPrice", originalPrice)
            .add("newPrice", newPrice)
            .toString();
    }
}