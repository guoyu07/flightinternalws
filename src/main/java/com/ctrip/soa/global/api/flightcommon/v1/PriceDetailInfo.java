/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.flightcommon.v1;

import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * APP4.4以后版本启用的新运价实体，扁平化输出运价信息
 */
@DtoDoc("APP4.4以后版本启用的新运价实体，扁平化输出运价信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PriceDetailInfo", propOrder = {
    "currency",
    "agencyID",
    "agencyCityCode",
    "viewTotalPrice",
    "cnyViewTotalPrice",
    "viewTaxPrice",
    "cnyViewTaxPrice",
    "aduPriceInfo",
    "chdPriceInfo",
    "infPriceInfo",
    "exchangeInfos",
    "includeTaxTotalPrice",
    "cnyIncludeTaxTotalPrice",
    "rescheduleFeeDetailsInfo"
})
@SuppressWarnings("all")
public class PriceDetailInfo  {

    private static final long serialVersionUID = 1L;

    public PriceDetailInfo(
        String currency, 
        String agencyID, 
        String agencyCityCode, 
        BigDecimal viewTotalPrice, 
        BigDecimal cnyViewTotalPrice, 
        BigDecimal viewTaxPrice, 
        BigDecimal cnyViewTaxPrice, 
        GaPassengerPriceInfo aduPriceInfo, 
        GaPassengerPriceInfo chdPriceInfo, 
        GaPassengerPriceInfo infPriceInfo, 
        List<ExchangeInfo> exchangeInfos, 
        BigDecimal includeTaxTotalPrice, 
        BigDecimal cnyIncludeTaxTotalPrice, 
        GaRescheduleFeeDetailsInfo rescheduleFeeDetailsInfo) {
        this.currency = currency;
        this.agencyID = agencyID;
        this.agencyCityCode = agencyCityCode;
        this.viewTotalPrice = viewTotalPrice;
        this.cnyViewTotalPrice = cnyViewTotalPrice;
        this.viewTaxPrice = viewTaxPrice;
        this.cnyViewTaxPrice = cnyViewTaxPrice;
        this.aduPriceInfo = aduPriceInfo;
        this.chdPriceInfo = chdPriceInfo;
        this.infPriceInfo = infPriceInfo;
        this.exchangeInfos = exchangeInfos;
        this.includeTaxTotalPrice = includeTaxTotalPrice;
        this.cnyIncludeTaxTotalPrice = cnyIncludeTaxTotalPrice;
        this.rescheduleFeeDetailsInfo = rescheduleFeeDetailsInfo;
    }

    public PriceDetailInfo() {
    }

    @FieldDoc("用户传入需要展示的展示币种")
    @JsonProperty("Currency")
    @XmlElement(name = "Currency")
    private String currency;

    @FieldDoc("票台ID号")
    @JsonProperty("AgencyID")
    @XmlElement(name = "AgencyID")
    private String agencyID;

    @FieldDoc("出票城市Code")
    @JsonProperty("AgencyCityCode")
    @XmlElement(name = "AgencyCityCode")
    private String agencyCityCode;

    @FieldDoc("需要在页面展示给用户看的运价，根据传入币种")
    @JsonProperty("ViewTotalPrice")
    @XmlElement(name = "ViewTotalPrice")
    private BigDecimal viewTotalPrice;

    @FieldDoc("需要在页面展示给用户看的运价，永远CNY币种")
    @JsonProperty("CNYViewTotalPrice")
    @XmlElement(name = "CNYViewTotalPrice")
    private BigDecimal cnyViewTotalPrice;

    @FieldDoc("需要在页面展示给用户看的税费，根据传入币种")
    @JsonProperty("ViewTaxPrice")
    @XmlElement(name = "ViewTaxPrice")
    private BigDecimal viewTaxPrice;

    @FieldDoc("需要在页面展示给用户看的税费，永远CNY币种")
    @JsonProperty("CNYViewTaxPrice")
    @XmlElement(name = "CNYViewTaxPrice")
    private BigDecimal cnyViewTaxPrice;

    @FieldDoc("存放成人乘客类型票价的实体")
    @JsonProperty("ADUPriceInfo")
    @XmlElement(name = "ADUPriceInfo")
    private GaPassengerPriceInfo aduPriceInfo;

    @FieldDoc("存放儿童乘客类型票价的实体")
    @JsonProperty("CHDPriceInfo")
    @XmlElement(name = "CHDPriceInfo")
    private GaPassengerPriceInfo chdPriceInfo;

    @FieldDoc("存放婴儿乘客类型票价的实体")
    @JsonProperty("INFPriceInfo")
    @XmlElement(name = "INFPriceInfo")
    private GaPassengerPriceInfo infPriceInfo;

    @FieldDoc("多币种支付信息 支持多个币种")
    @JsonProperty("ExchangeInfos")
    @XmlElement(name = "ExchangeInfos")
    private List<ExchangeInfo> exchangeInfos;

    @FieldDoc("需要在页面展示的用户需支付的总额，包含税费，根据传入币种")
    @JsonProperty("IncludeTaxTotalPrice")
    @XmlElement(name = "IncludeTaxTotalPrice")
    private BigDecimal includeTaxTotalPrice;

    @FieldDoc("需要在页面展示的用户需支付的总额，包含税费，永远CNY币种")
    @JsonProperty("CNYIncludeTaxTotalPrice")
    @XmlElement(name = "CNYIncludeTaxTotalPrice")
    private BigDecimal cnyIncludeTaxTotalPrice;

    @FieldDoc("改签费用明细信息")
    @JsonProperty("RescheduleFeeDetailsInfo")
    @XmlElement(name = "RescheduleFeeDetailsInfo")
    private GaRescheduleFeeDetailsInfo rescheduleFeeDetailsInfo;

    /**
     * 用户传入需要展示的展示币种
     */
    public String getCurrency() {
        return this.currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    /**
     * 票台ID号
     */
    public String getAgencyID() {
        return this.agencyID;
    }

    public void setAgencyID(String agencyID) {
        this.agencyID = agencyID;
    }

    /**
     * 出票城市Code
     */
    public String getAgencyCityCode() {
        return this.agencyCityCode;
    }

    public void setAgencyCityCode(String agencyCityCode) {
        this.agencyCityCode = agencyCityCode;
    }

    /**
     * 需要在页面展示给用户看的运价，根据传入币种
     */
    public BigDecimal getViewTotalPrice() {
        return this.viewTotalPrice;
    }

    public void setViewTotalPrice(BigDecimal viewTotalPrice) {
        this.viewTotalPrice = viewTotalPrice;
    }

    /**
     * 需要在页面展示给用户看的运价，永远CNY币种
     */
    public BigDecimal getCnyViewTotalPrice() {
        return this.cnyViewTotalPrice;
    }

    public void setCnyViewTotalPrice(BigDecimal cnyViewTotalPrice) {
        this.cnyViewTotalPrice = cnyViewTotalPrice;
    }

    /**
     * 需要在页面展示给用户看的税费，根据传入币种
     */
    public BigDecimal getViewTaxPrice() {
        return this.viewTaxPrice;
    }

    public void setViewTaxPrice(BigDecimal viewTaxPrice) {
        this.viewTaxPrice = viewTaxPrice;
    }

    /**
     * 需要在页面展示给用户看的税费，永远CNY币种
     */
    public BigDecimal getCnyViewTaxPrice() {
        return this.cnyViewTaxPrice;
    }

    public void setCnyViewTaxPrice(BigDecimal cnyViewTaxPrice) {
        this.cnyViewTaxPrice = cnyViewTaxPrice;
    }

    /**
     * 存放成人乘客类型票价的实体
     */
    public GaPassengerPriceInfo getAduPriceInfo() {
        return this.aduPriceInfo;
    }

    public void setAduPriceInfo(GaPassengerPriceInfo aduPriceInfo) {
        this.aduPriceInfo = aduPriceInfo;
    }

    /**
     * 存放儿童乘客类型票价的实体
     */
    public GaPassengerPriceInfo getChdPriceInfo() {
        return this.chdPriceInfo;
    }

    public void setChdPriceInfo(GaPassengerPriceInfo chdPriceInfo) {
        this.chdPriceInfo = chdPriceInfo;
    }

    /**
     * 存放婴儿乘客类型票价的实体
     */
    public GaPassengerPriceInfo getInfPriceInfo() {
        return this.infPriceInfo;
    }

    public void setInfPriceInfo(GaPassengerPriceInfo infPriceInfo) {
        this.infPriceInfo = infPriceInfo;
    }

    /**
     * 多币种支付信息 支持多个币种
     */
    public List<ExchangeInfo> getExchangeInfos() {
        return this.exchangeInfos;
    }

    public void setExchangeInfos(List<ExchangeInfo> exchangeInfos) {
        this.exchangeInfos = exchangeInfos;
    }

    /**
     * 需要在页面展示的用户需支付的总额，包含税费，根据传入币种
     */
    public BigDecimal getIncludeTaxTotalPrice() {
        return this.includeTaxTotalPrice;
    }

    public void setIncludeTaxTotalPrice(BigDecimal includeTaxTotalPrice) {
        this.includeTaxTotalPrice = includeTaxTotalPrice;
    }

    /**
     * 需要在页面展示的用户需支付的总额，包含税费，永远CNY币种
     */
    public BigDecimal getCnyIncludeTaxTotalPrice() {
        return this.cnyIncludeTaxTotalPrice;
    }

    public void setCnyIncludeTaxTotalPrice(BigDecimal cnyIncludeTaxTotalPrice) {
        this.cnyIncludeTaxTotalPrice = cnyIncludeTaxTotalPrice;
    }

    /**
     * 改签费用明细信息
     */
    public GaRescheduleFeeDetailsInfo getRescheduleFeeDetailsInfo() {
        return this.rescheduleFeeDetailsInfo;
    }

    public void setRescheduleFeeDetailsInfo(GaRescheduleFeeDetailsInfo rescheduleFeeDetailsInfo) {
        this.rescheduleFeeDetailsInfo = rescheduleFeeDetailsInfo;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final PriceDetailInfo other = (PriceDetailInfo)obj;
        return
            Objects.equal(this.currency, other.currency) && 
            Objects.equal(this.agencyID, other.agencyID) && 
            Objects.equal(this.agencyCityCode, other.agencyCityCode) && 
            Objects.equal(this.viewTotalPrice, other.viewTotalPrice) && 
            Objects.equal(this.cnyViewTotalPrice, other.cnyViewTotalPrice) && 
            Objects.equal(this.viewTaxPrice, other.viewTaxPrice) && 
            Objects.equal(this.cnyViewTaxPrice, other.cnyViewTaxPrice) && 
            Objects.equal(this.aduPriceInfo, other.aduPriceInfo) && 
            Objects.equal(this.chdPriceInfo, other.chdPriceInfo) && 
            Objects.equal(this.infPriceInfo, other.infPriceInfo) && 
            Objects.equal(this.exchangeInfos, other.exchangeInfos) && 
            Objects.equal(this.includeTaxTotalPrice, other.includeTaxTotalPrice) && 
            Objects.equal(this.cnyIncludeTaxTotalPrice, other.cnyIncludeTaxTotalPrice) && 
            Objects.equal(this.rescheduleFeeDetailsInfo, other.rescheduleFeeDetailsInfo);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.currency);
        result = 31 * result + Objects.hashCode(this.agencyID);
        result = 31 * result + Objects.hashCode(this.agencyCityCode);
        result = 31 * result + Objects.hashCode(this.viewTotalPrice);
        result = 31 * result + Objects.hashCode(this.cnyViewTotalPrice);
        result = 31 * result + Objects.hashCode(this.viewTaxPrice);
        result = 31 * result + Objects.hashCode(this.cnyViewTaxPrice);
        result = 31 * result + Objects.hashCode(this.aduPriceInfo);
        result = 31 * result + Objects.hashCode(this.chdPriceInfo);
        result = 31 * result + Objects.hashCode(this.infPriceInfo);
        result = 31 * result + Objects.hashCode(this.exchangeInfos);
        result = 31 * result + Objects.hashCode(this.includeTaxTotalPrice);
        result = 31 * result + Objects.hashCode(this.cnyIncludeTaxTotalPrice);
        result = 31 * result + Objects.hashCode(this.rescheduleFeeDetailsInfo);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("currency", currency)
            .add("agencyID", agencyID)
            .add("agencyCityCode", agencyCityCode)
            .add("viewTotalPrice", viewTotalPrice)
            .add("cnyViewTotalPrice", cnyViewTotalPrice)
            .add("viewTaxPrice", viewTaxPrice)
            .add("cnyViewTaxPrice", cnyViewTaxPrice)
            .add("aduPriceInfo", aduPriceInfo)
            .add("chdPriceInfo", chdPriceInfo)
            .add("infPriceInfo", infPriceInfo)
            .add("exchangeInfos", exchangeInfos)
            .add("includeTaxTotalPrice", includeTaxTotalPrice)
            .add("cnyIncludeTaxTotalPrice", cnyIncludeTaxTotalPrice)
            .add("rescheduleFeeDetailsInfo", rescheduleFeeDetailsInfo)
            .toString();
    }
}