/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.garescheduleapply.v1;

import com.ctrip.soa.global.api.comm.head.v1.Head;
import com.ctrip.soa.global.api.flightcommon.v1.GaContactInfo;
import com.ctrip.soa.global.api.flightcommon.v1.ProductKeyInfo;
import com.ctrip.soa.global.api.flightcommon.v1.RQPassengerInfo;
import com.ctrip.soa.global.api.flightcommon.v1.RescheduleSegment;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 机票改签提交接口请求
 */
@DtoDoc("机票改签提交接口请求")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name = "GaRescheduleApplyRequest", namespace = "http://soa.ctrip.com/Global/API/GaRescheduleApply/v1")
@XmlType(name = "GaRescheduleApplyRequest", propOrder = {
    "head",
    "orderID",
    "flightOrderClass",
    "passengerInfoList",
    "rescheduleSegmentList",
    "productKeyInfo",
    "verifyTokenNumber",
    "contactInfo",
    "rescheduleFeeCanCompute",
    "rescheduleMode",
    "applyNonQuery"
})
@SuppressWarnings("all")
public class GaRescheduleApplyRequest  {

    private static final long serialVersionUID = 1L;

    public GaRescheduleApplyRequest(
        Head head, 
        long orderID, 
        String flightOrderClass, 
        List<RQPassengerInfo> passengerInfoList, 
        List<RescheduleSegment> rescheduleSegmentList, 
        ProductKeyInfo productKeyInfo, 
        String verifyTokenNumber, 
        GaContactInfo contactInfo, 
        boolean rescheduleFeeCanCompute, 
        int rescheduleMode, 
        boolean applyNonQuery) {
        this.head = head;
        this.orderID = orderID;
        this.flightOrderClass = flightOrderClass;
        this.passengerInfoList = passengerInfoList;
        this.rescheduleSegmentList = rescheduleSegmentList;
        this.productKeyInfo = productKeyInfo;
        this.verifyTokenNumber = verifyTokenNumber;
        this.contactInfo = contactInfo;
        this.rescheduleFeeCanCompute = rescheduleFeeCanCompute;
        this.rescheduleMode = rescheduleMode;
        this.applyNonQuery = applyNonQuery;
    }

    public GaRescheduleApplyRequest() {
    }

    @FieldDoc("SOA2.0请求头部信息")
    @JsonProperty("Head")
    @XmlElement(name = "Head")
    private Head head;

    @FieldDoc("改签订单号")
    @JsonProperty("OrderID")
    @XmlElement(name = "OrderID")
    private long orderID;

    @FieldDoc("I：国际，N：国内")
    @JsonProperty("FlightOrderClass")
    @XmlElement(name = "FlightOrderClass")
    private String flightOrderClass;

    @FieldDoc("改签人")
    @JsonProperty("PassengerInfoList")
    @XmlElement(name = "PassengerInfoList")
    private List<RQPassengerInfo> passengerInfoList;

    @FieldDoc("改签航班列表")
    @JsonProperty("RescheduleSegmentList")
    @XmlElement(name = "RescheduleSegmentList")
    private List<RescheduleSegment> rescheduleSegmentList;

    @FieldDoc("国际机票验舱验价必传，来源于GetBookingInfo接口中")
    @JsonProperty("ProductKeyInfo")
    @XmlElement(name = "ProductKeyInfo")
    private ProductKeyInfo productKeyInfo;

    @FieldDoc("可定检查TokenNumber")
    @JsonProperty("VerifyTokenNumber")
    @XmlElement(name = "VerifyTokenNumber")
    private String verifyTokenNumber;

    @FieldDoc("联系人信息")
    @JsonProperty("ContactInfo")
    @XmlElement(name = "ContactInfo")
    private GaContactInfo contactInfo;

    @FieldDoc("改签费用是否可计算")
    @JsonProperty("RescheduleFeeCanCompute")
    @XmlElement(name = "RescheduleFeeCanCompute")
    private boolean rescheduleFeeCanCompute;

    @FieldDoc("改签方式：" +
            "1-自愿改签；" +
            "2-航变改签")
    @JsonProperty("RescheduleMode")
    @XmlElement(name = "RescheduleMode")
    private int rescheduleMode;

    @FieldDoc("是否是不查询直接提交申请" +
            "True:直接提交申请，不支付不查询" +
            "Flase:正常改签")
    @JsonProperty("ApplyNonQuery")
    @XmlElement(name = "ApplyNonQuery")
    private boolean applyNonQuery;

    /**
     * SOA2.0请求头部信息
     */
    public Head getHead() {
        return this.head;
    }

    public void setHead(Head head) {
        this.head = head;
    }

    /**
     * 改签订单号
     */
    public long getOrderID() {
        return this.orderID;
    }

    public void setOrderID(long orderID) {
        this.orderID = orderID;
    }

    /**
     * I：国际，N：国内
     */
    public String getFlightOrderClass() {
        return this.flightOrderClass;
    }

    public void setFlightOrderClass(String flightOrderClass) {
        this.flightOrderClass = flightOrderClass;
    }

    /**
     * 改签人
     */
    public List<RQPassengerInfo> getPassengerInfoList() {
        return this.passengerInfoList;
    }

    public void setPassengerInfoList(List<RQPassengerInfo> passengerInfoList) {
        this.passengerInfoList = passengerInfoList;
    }

    /**
     * 改签航班列表
     */
    public List<RescheduleSegment> getRescheduleSegmentList() {
        return this.rescheduleSegmentList;
    }

    public void setRescheduleSegmentList(List<RescheduleSegment> rescheduleSegmentList) {
        this.rescheduleSegmentList = rescheduleSegmentList;
    }

    /**
     * 国际机票验舱验价必传，来源于GetBookingInfo接口中
     */
    public ProductKeyInfo getProductKeyInfo() {
        return this.productKeyInfo;
    }

    public void setProductKeyInfo(ProductKeyInfo productKeyInfo) {
        this.productKeyInfo = productKeyInfo;
    }

    /**
     * 可定检查TokenNumber
     */
    public String getVerifyTokenNumber() {
        return this.verifyTokenNumber;
    }

    public void setVerifyTokenNumber(String verifyTokenNumber) {
        this.verifyTokenNumber = verifyTokenNumber;
    }

    /**
     * 联系人信息
     */
    public GaContactInfo getContactInfo() {
        return this.contactInfo;
    }

    public void setContactInfo(GaContactInfo contactInfo) {
        this.contactInfo = contactInfo;
    }

    /**
     * 改签费用是否可计算
     */
    public boolean getRescheduleFeeCanCompute() {
        return this.rescheduleFeeCanCompute;
    }

    public void setRescheduleFeeCanCompute(boolean rescheduleFeeCanCompute) {
        this.rescheduleFeeCanCompute = rescheduleFeeCanCompute;
    }

    /**
     * 改签方式：
     *             1-自愿改签；
     *             2-航变改签
     */
    public int getRescheduleMode() {
        return this.rescheduleMode;
    }

    public void setRescheduleMode(int rescheduleMode) {
        this.rescheduleMode = rescheduleMode;
    }

    /**
     * 是否是不查询直接提交申请
     *             True:直接提交申请，不支付不查询
     *             Flase:正常改签
     */
    public boolean getApplyNonQuery() {
        return this.applyNonQuery;
    }

    public void setApplyNonQuery(boolean applyNonQuery) {
        this.applyNonQuery = applyNonQuery;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final GaRescheduleApplyRequest other = (GaRescheduleApplyRequest)obj;
        return
            Objects.equal(this.head, other.head) && 
            Objects.equal(this.orderID, other.orderID) && 
            Objects.equal(this.flightOrderClass, other.flightOrderClass) && 
            Objects.equal(this.passengerInfoList, other.passengerInfoList) && 
            Objects.equal(this.rescheduleSegmentList, other.rescheduleSegmentList) && 
            Objects.equal(this.productKeyInfo, other.productKeyInfo) && 
            Objects.equal(this.verifyTokenNumber, other.verifyTokenNumber) && 
            Objects.equal(this.contactInfo, other.contactInfo) && 
            Objects.equal(this.rescheduleFeeCanCompute, other.rescheduleFeeCanCompute) && 
            Objects.equal(this.rescheduleMode, other.rescheduleMode) && 
            Objects.equal(this.applyNonQuery, other.applyNonQuery);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.head);
        result = 31 * result + Objects.hashCode(this.orderID);
        result = 31 * result + Objects.hashCode(this.flightOrderClass);
        result = 31 * result + Objects.hashCode(this.passengerInfoList);
        result = 31 * result + Objects.hashCode(this.rescheduleSegmentList);
        result = 31 * result + Objects.hashCode(this.productKeyInfo);
        result = 31 * result + Objects.hashCode(this.verifyTokenNumber);
        result = 31 * result + Objects.hashCode(this.contactInfo);
        result = 31 * result + Objects.hashCode(this.rescheduleFeeCanCompute);
        result = 31 * result + Objects.hashCode(this.rescheduleMode);
        result = 31 * result + Objects.hashCode(this.applyNonQuery);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("head", head)
            .add("orderID", orderID)
            .add("flightOrderClass", flightOrderClass)
            .add("passengerInfoList", passengerInfoList)
            .add("rescheduleSegmentList", rescheduleSegmentList)
            .add("productKeyInfo", productKeyInfo)
            .add("verifyTokenNumber", verifyTokenNumber)
            .add("contactInfo", contactInfo)
            .add("rescheduleFeeCanCompute", rescheduleFeeCanCompute)
            .add("rescheduleMode", rescheduleMode)
            .add("applyNonQuery", applyNonQuery)
            .toString();
    }
}