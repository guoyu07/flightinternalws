// Generated by eBay Common SDK Platform
package com.ctrip.soa.global.api.flightcommon.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlEnumValue;

/**
 * 国内产品类型
 */
@XmlType(name = "DomesticProductType")
@XmlEnum
@SuppressWarnings("all")
public enum DomesticProductType {

    /**
     * 未知
     */
    @XmlEnumValue("NA")
    NA(0, "NA"),

    /**
     * 普通政策
     */
    @XmlEnumValue("Normal")
    Normal(1, "Normal"),

    /**
     * 提前预售政策
     */
    @XmlEnumValue("SingleTrip")
    SingleTrip(2, "SingleTrip"),

    /**
     * 往返打包政策
     */
    @XmlEnumValue("RoundTrip")
    RoundTrip(3, "RoundTrip"),

    /**
     * 待机政策
     */
    @XmlEnumValue("AirHotel")
    AirHotel(4, "AirHotel"),

    /**
     * 商旅政策
     */
    @XmlEnumValue("Corperation")
    Corperation(5, "Corperation"),

    /**
     * 往返折上折政策
     */
    @XmlEnumValue("OPRound")
    OPRound(6, "OPRound"),

    /**
     * 单程折上折政策（直减）
     */
    @XmlEnumValue("OPSingle")
    OPSingle(7, "OPSingle"),

    /**
     * 老年政策
     */
    @XmlEnumValue("OLDMAN")
    OLDMAN(8, "OLDMAN"),

    /**
     * 青年政策
     */
    @XmlEnumValue("YOUNGMAN")
    YOUNGMAN(9, "YOUNGMAN"),

    /**
     * 中转联程政策
     */
    @XmlEnumValue("Transit")
    Transit(10, "Transit"),

    /**
     * 规则运价政策
     */
    @XmlEnumValue("SingleRule")
    SingleRule(11, "SingleRule"),

    /**
     * 收工订单政策
     */
    @XmlEnumValue("ManualOrder")
    ManualOrder(12, "ManualOrder"),

    @XmlEnumValue("GDS")
    GDS(13, "GDS"),

    @XmlEnumValue("ZY")
    ZY(14, "ZY");

    private final int intValue;
    private final String value;

    DomesticProductType(int intValue, String value) {
        this.intValue = intValue;
        this.value = value;
    }

    public int getValue() {
        return intValue;
    }

    @JsonValue
    public String value() {
        return value;
    }

    @JsonCreator
    public static DomesticProductType fromValue(String v) {
        for (DomesticProductType e: DomesticProductType.values()) {
            if (e.value.equals(v)) {
                return e;
            }
        }
        throw new IllegalArgumentException(v);
    }

    public static DomesticProductType findByValue(int value) {
        switch (value) {
            case 0:
                return NA;
            case 1:
                return Normal;
            case 2:
                return SingleTrip;
            case 3:
                return RoundTrip;
            case 4:
                return AirHotel;
            case 5:
                return Corperation;
            case 6:
                return OPRound;
            case 7:
                return OPSingle;
            case 8:
                return OLDMAN;
            case 9:
                return YOUNGMAN;
            case 10:
                return Transit;
            case 11:
                return SingleRule;
            case 12:
                return ManualOrder;
            case 13:
                return GDS;
            case 14:
                return ZY;
            default:
                return null;
        }
    }
}