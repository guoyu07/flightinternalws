/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.gaflightpaymentnotifyforonlinedomestic.v1;

import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 通知请求支付信息
 */
@DtoDoc("通知请求支付信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "NotifyPayInformation", propOrder = {
    "subPaySystem",
    "catalogCode",
    "paymentWayID",
    "prePayType",
    "creditCardType",
    "holder",
    "cardInfoID",
    "currency",
    "amount",
    "exchangeRate",
    "payFeeRate",
    "payFee"
})
@SuppressWarnings("all")
public class NotifyPayInformation  {

    private static final long serialVersionUID = 1L;

    public NotifyPayInformation(
        int subPaySystem, 
        String catalogCode, 
        String paymentWayID, 
        String prePayType, 
        int creditCardType, 
        String holder, 
        int cardInfoID, 
        String currency, 
        BigDecimal amount, 
        BigDecimal exchangeRate, 
        BigDecimal payFeeRate, 
        BigDecimal payFee) {
        this.subPaySystem = subPaySystem;
        this.catalogCode = catalogCode;
        this.paymentWayID = paymentWayID;
        this.prePayType = prePayType;
        this.creditCardType = creditCardType;
        this.holder = holder;
        this.cardInfoID = cardInfoID;
        this.currency = currency;
        this.amount = amount;
        this.exchangeRate = exchangeRate;
        this.payFeeRate = payFeeRate;
        this.payFee = payFee;
    }

    public NotifyPayInformation() {
    }

    @FieldDoc("支付子系统")
    @JsonProperty("SubPaySystem")
    @XmlElement(name = "SubPaySystem")
    private int subPaySystem;

    @FieldDoc("支付大类String(50)")
    @JsonProperty("CatalogCode")
    @XmlElement(name = "CatalogCode")
    private String catalogCode;

    @FieldDoc("支付小类String(50)")
    @JsonProperty("PaymentWayID")
    @XmlElement(name = "PaymentWayID")
    private String paymentWayID;

    @FieldDoc("支付方式String(5)")
    @JsonProperty("PrePayType")
    @XmlElement(name = "PrePayType")
    private String prePayType;

    @FieldDoc("支付方式编码")
    @JsonProperty("CreditCardType")
    @XmlElement(name = "CreditCardType")
    private int creditCardType;

    @FieldDoc("持卡人名称,业务部分需求需要判断消费者和支付者是否是同一个人")
    @JsonProperty("Holder")
    @XmlElement(name = "Holder")
    private String holder;

    @FieldDoc("卡信息ID（信用卡和储蓄卡）非信用卡储蓄卡为-1")
    @JsonProperty("CardInfoID")
    @XmlElement(name = "CardInfoID")
    private int cardInfoID;

    @FieldDoc("币种String(3)")
    @JsonProperty("Currency")
    @XmlElement(name = "Currency")
    private String currency;

    @FieldDoc("当前支付方式对应的金额，币种取BaseInfo(Decimal(19,4))")
    @JsonProperty("Amount")
    @XmlElement(name = "Amount")
    private BigDecimal amount;

    @FieldDoc("汇率(Decimal(19,4))")
    @JsonProperty("ExchangeRate")
    @XmlElement(name = "ExchangeRate")
    private BigDecimal exchangeRate;

    @FieldDoc("手续费费率(Decimal(19,4))")
    @JsonProperty("PayFeeRate")
    @XmlElement(name = "PayFeeRate")
    private BigDecimal payFeeRate;

    @FieldDoc("当前支付方式对应的手续费，币种取BaseInfo(Decimal(19,4))")
    @JsonProperty("PayFee")
    @XmlElement(name = "PayFee")
    private BigDecimal payFee;

    /**
     * 支付子系统
     */
    public int getSubPaySystem() {
        return this.subPaySystem;
    }

    public void setSubPaySystem(int subPaySystem) {
        this.subPaySystem = subPaySystem;
    }

    /**
     * 支付大类String(50)
     */
    public String getCatalogCode() {
        return this.catalogCode;
    }

    public void setCatalogCode(String catalogCode) {
        this.catalogCode = catalogCode;
    }

    /**
     * 支付小类String(50)
     */
    public String getPaymentWayID() {
        return this.paymentWayID;
    }

    public void setPaymentWayID(String paymentWayID) {
        this.paymentWayID = paymentWayID;
    }

    /**
     * 支付方式String(5)
     */
    public String getPrePayType() {
        return this.prePayType;
    }

    public void setPrePayType(String prePayType) {
        this.prePayType = prePayType;
    }

    /**
     * 支付方式编码
     */
    public int getCreditCardType() {
        return this.creditCardType;
    }

    public void setCreditCardType(int creditCardType) {
        this.creditCardType = creditCardType;
    }

    /**
     * 持卡人名称,业务部分需求需要判断消费者和支付者是否是同一个人
     */
    public String getHolder() {
        return this.holder;
    }

    public void setHolder(String holder) {
        this.holder = holder;
    }

    /**
     * 卡信息ID（信用卡和储蓄卡）非信用卡储蓄卡为-1
     */
    public int getCardInfoID() {
        return this.cardInfoID;
    }

    public void setCardInfoID(int cardInfoID) {
        this.cardInfoID = cardInfoID;
    }

    /**
     * 币种String(3)
     */
    public String getCurrency() {
        return this.currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    /**
     * 当前支付方式对应的金额，币种取BaseInfo(Decimal(19,4))
     */
    public BigDecimal getAmount() {
        return this.amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    /**
     * 汇率(Decimal(19,4))
     */
    public BigDecimal getExchangeRate() {
        return this.exchangeRate;
    }

    public void setExchangeRate(BigDecimal exchangeRate) {
        this.exchangeRate = exchangeRate;
    }

    /**
     * 手续费费率(Decimal(19,4))
     */
    public BigDecimal getPayFeeRate() {
        return this.payFeeRate;
    }

    public void setPayFeeRate(BigDecimal payFeeRate) {
        this.payFeeRate = payFeeRate;
    }

    /**
     * 当前支付方式对应的手续费，币种取BaseInfo(Decimal(19,4))
     */
    public BigDecimal getPayFee() {
        return this.payFee;
    }

    public void setPayFee(BigDecimal payFee) {
        this.payFee = payFee;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final NotifyPayInformation other = (NotifyPayInformation)obj;
        return
            Objects.equal(this.subPaySystem, other.subPaySystem) && 
            Objects.equal(this.catalogCode, other.catalogCode) && 
            Objects.equal(this.paymentWayID, other.paymentWayID) && 
            Objects.equal(this.prePayType, other.prePayType) && 
            Objects.equal(this.creditCardType, other.creditCardType) && 
            Objects.equal(this.holder, other.holder) && 
            Objects.equal(this.cardInfoID, other.cardInfoID) && 
            Objects.equal(this.currency, other.currency) && 
            Objects.equal(this.amount, other.amount) && 
            Objects.equal(this.exchangeRate, other.exchangeRate) && 
            Objects.equal(this.payFeeRate, other.payFeeRate) && 
            Objects.equal(this.payFee, other.payFee);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.subPaySystem);
        result = 31 * result + Objects.hashCode(this.catalogCode);
        result = 31 * result + Objects.hashCode(this.paymentWayID);
        result = 31 * result + Objects.hashCode(this.prePayType);
        result = 31 * result + Objects.hashCode(this.creditCardType);
        result = 31 * result + Objects.hashCode(this.holder);
        result = 31 * result + Objects.hashCode(this.cardInfoID);
        result = 31 * result + Objects.hashCode(this.currency);
        result = 31 * result + Objects.hashCode(this.amount);
        result = 31 * result + Objects.hashCode(this.exchangeRate);
        result = 31 * result + Objects.hashCode(this.payFeeRate);
        result = 31 * result + Objects.hashCode(this.payFee);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("subPaySystem", subPaySystem)
            .add("catalogCode", catalogCode)
            .add("paymentWayID", paymentWayID)
            .add("prePayType", prePayType)
            .add("creditCardType", creditCardType)
            .add("holder", holder)
            .add("cardInfoID", cardInfoID)
            .add("currency", currency)
            .add("amount", amount)
            .add("exchangeRate", exchangeRate)
            .add("payFeeRate", payFeeRate)
            .add("payFee", payFee)
            .toString();
    }
}