/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.flight.union_searchflightsws.v1;

import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PartitionSearchControlType", propOrder = {
    "needPartitionedSearchResults",
    "partitionSearchToken"
})
@SuppressWarnings("all")
public class PartitionSearchControlType  {

    private static final long serialVersionUID = 1L;

    public PartitionSearchControlType(
        boolean needPartitionedSearchResults, 
        String partitionSearchToken) {
        this.needPartitionedSearchResults = needPartitionedSearchResults;
        this.partitionSearchToken = partitionSearchToken;
    }

    public PartitionSearchControlType() {
    }

    @FieldDoc("Need partitioned search or not")
    @JsonProperty("NeedPartitionedSearchResults")
    @XmlElement(name = "NeedPartitionedSearchResults")
    private boolean needPartitionedSearchResults;

    @JsonProperty("PartitionSearchToken")
    @XmlElement(name = "PartitionSearchToken")
    private String partitionSearchToken;

    /**
     * Need partitioned search or not
     */
    public boolean getNeedPartitionedSearchResults() {
        return this.needPartitionedSearchResults;
    }

    public void setNeedPartitionedSearchResults(boolean needPartitionedSearchResults) {
        this.needPartitionedSearchResults = needPartitionedSearchResults;
    }

    public String getPartitionSearchToken() {
        return this.partitionSearchToken;
    }

    public void setPartitionSearchToken(String partitionSearchToken) {
        this.partitionSearchToken = partitionSearchToken;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final PartitionSearchControlType other = (PartitionSearchControlType)obj;
        return
            Objects.equal(this.needPartitionedSearchResults, other.needPartitionedSearchResults) && 
            Objects.equal(this.partitionSearchToken, other.partitionSearchToken);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.needPartitionedSearchResults);
        result = 31 * result + Objects.hashCode(this.partitionSearchToken);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("needPartitionedSearchResults", needPartitionedSearchResults)
            .add("partitionSearchToken", partitionSearchToken)
            .toString();
    }
}