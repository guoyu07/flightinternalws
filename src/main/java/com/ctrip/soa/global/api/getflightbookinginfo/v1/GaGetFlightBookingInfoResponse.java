/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.getflightbookinginfo.v1;

import com.ctrip.soa.global.api.comm.responsehead.v1.ResponseHead;
import com.ctrip.soa.global.api.flightcommon.v1.VipLounge;
import com.ctriposs.baiji.rpc.common.HasResponseStatus;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.ctriposs.baiji.rpc.common.types.ResponseStatusType;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name = "GaGetFlightBookingInfoResponse", namespace = "http://soa.ctrip.com/Global/API/GetFlightBookingInfo/v1")
@XmlType(name = "GaGetFlightBookingInfoResponse", propOrder = {
    "responseStatus",
    "responseHead",
    "fltProductInfoList",
    "dFltPriceChangeInfo",
    "aFltPriceChangeInfo",
    "isPartial",
    "appSlogan",
    "isNeedSplitter",
    "reprincingToken",
    "bookabilityToken",
    "bookabilityTokenNumber",
    "repricingTokenNumber",
    "needGetFareRemark",
    "vipLoungeList",
    "isAddPassengerRequery"
})
@SuppressWarnings("all")
public class GaGetFlightBookingInfoResponse implements HasResponseStatus {

    private static final long serialVersionUID = 1L;

    public GaGetFlightBookingInfoResponse(
        ResponseStatusType responseStatus, 
        ResponseHead responseHead, 
        List<BookingFltProductInfo> fltProductInfoList, 
        FltPriceChangeInfo dFltPriceChangeInfo, 
        FltPriceChangeInfo aFltPriceChangeInfo, 
        boolean isPartial, 
        String appSlogan, 
        boolean isNeedSplitter, 
        String reprincingToken, 
        String bookabilityToken, 
        String bookabilityTokenNumber, 
        String repricingTokenNumber, 
        boolean needGetFareRemark, 
        List<VipLounge> vipLoungeList, 
        boolean isAddPassengerRequery) {
        this.responseStatus = responseStatus;
        this.responseHead = responseHead;
        this.fltProductInfoList = fltProductInfoList;
        this.dFltPriceChangeInfo = dFltPriceChangeInfo;
        this.aFltPriceChangeInfo = aFltPriceChangeInfo;
        this.isPartial = isPartial;
        this.appSlogan = appSlogan;
        this.isNeedSplitter = isNeedSplitter;
        this.reprincingToken = reprincingToken;
        this.bookabilityToken = bookabilityToken;
        this.bookabilityTokenNumber = bookabilityTokenNumber;
        this.repricingTokenNumber = repricingTokenNumber;
        this.needGetFareRemark = needGetFareRemark;
        this.vipLoungeList = vipLoungeList;
        this.isAddPassengerRequery = isAddPassengerRequery;
    }

    public GaGetFlightBookingInfoResponse() {
    }

    @JsonProperty("ResponseStatus")
    @XmlElement(name = "ResponseStatus")
    private ResponseStatusType responseStatus;

    @JsonProperty("ResponseHead")
    @XmlElement(name = "ResponseHead")
    private ResponseHead responseHead;

    @FieldDoc("航线产品信息")
    @JsonProperty("FltProductInfoList")
    @XmlElement(name = "FltProductInfoList")
    private List<BookingFltProductInfo> fltProductInfoList;

    @FieldDoc("出发程变价信息，为空表示没有变价，并且变价只对比成人价")
    @JsonProperty("DFltPriceChangeInfo")
    @XmlElement(name = "DFltPriceChangeInfo")
    private FltPriceChangeInfo dFltPriceChangeInfo;

    @FieldDoc("返回程变价信息，为空表示没有变价，并且变价只对比成人价")
    @JsonProperty("AFltPriceChangeInfo")
    @XmlElement(name = "AFltPriceChangeInfo")
    private FltPriceChangeInfo aFltPriceChangeInfo;

    @FieldDoc("是否存在弃程")
    @JsonProperty("IsPartial")
    @XmlElement(name = "IsPartial")
    private boolean isPartial;

    @FieldDoc("APP顶部滚动标语")
    @JsonProperty("APPSlogan")
    @XmlElement(name = "APPSlogan")
    private String appSlogan;

    @FieldDoc("往返是否拆单")
    @JsonProperty("IsNeedSplitter")
    @XmlElement(name = "IsNeedSplitter")
    private boolean isNeedSplitter;

    @FieldDoc("国际机票用 QTE运价Token")
    @JsonProperty("ReprincingToken")
    @XmlElement(name = "ReprincingToken")
    private String reprincingToken;

    @FieldDoc("国际自己票用 满仓Token")
    @JsonProperty("BookabilityToken")
    @XmlElement(name = "BookabilityToken")
    private String bookabilityToken;

    @FieldDoc("验舱异步token")
    @JsonProperty("BookabilityTokenNumber")
    @XmlElement(name = "BookabilityTokenNumber")
    private String bookabilityTokenNumber;

    @FieldDoc("验价异步token")
    @JsonProperty("RepricingTokenNumber")
    @XmlElement(name = "RepricingTokenNumber")
    private String repricingTokenNumber;

    @FieldDoc("是否需要访问退改签接口获取退改签")
    @JsonProperty("NeedGetFareRemark")
    @XmlElement(name = "NeedGetFareRemark")
    private boolean needGetFareRemark;

    @FieldDoc("国内机票休息室信息")
    @JsonProperty("VipLoungeList")
    @XmlElement(name = "VipLoungeList")
    private List<VipLounge> vipLoungeList;

    @FieldDoc("是否在添加乘机人时需要重新查询 true需要，false不需要")
    @JsonProperty("IsAddPassengerRequery")
    @XmlElement(name = "IsAddPassengerRequery")
    private boolean isAddPassengerRequery;

    public ResponseStatusType getResponseStatus() {
        return this.responseStatus;
    }

    public void setResponseStatus(ResponseStatusType responseStatus) {
        this.responseStatus = responseStatus;
    }

    public ResponseHead getResponseHead() {
        return this.responseHead;
    }

    public void setResponseHead(ResponseHead responseHead) {
        this.responseHead = responseHead;
    }

    /**
     * 航线产品信息
     */
    public List<BookingFltProductInfo> getFltProductInfoList() {
        return this.fltProductInfoList;
    }

    public void setFltProductInfoList(List<BookingFltProductInfo> fltProductInfoList) {
        this.fltProductInfoList = fltProductInfoList;
    }

    /**
     * 出发程变价信息，为空表示没有变价，并且变价只对比成人价
     */
    public FltPriceChangeInfo getDFltPriceChangeInfo() {
        return this.dFltPriceChangeInfo;
    }

    public void setDFltPriceChangeInfo(FltPriceChangeInfo dFltPriceChangeInfo) {
        this.dFltPriceChangeInfo = dFltPriceChangeInfo;
    }

    /**
     * 返回程变价信息，为空表示没有变价，并且变价只对比成人价
     */
    public FltPriceChangeInfo getAFltPriceChangeInfo() {
        return this.aFltPriceChangeInfo;
    }

    public void setAFltPriceChangeInfo(FltPriceChangeInfo aFltPriceChangeInfo) {
        this.aFltPriceChangeInfo = aFltPriceChangeInfo;
    }

    /**
     * 是否存在弃程
     */
    public boolean getIsPartial() {
        return this.isPartial;
    }

    public void setIsPartial(boolean isPartial) {
        this.isPartial = isPartial;
    }

    /**
     * APP顶部滚动标语
     */
    public String getAppSlogan() {
        return this.appSlogan;
    }

    public void setAppSlogan(String appSlogan) {
        this.appSlogan = appSlogan;
    }

    /**
     * 往返是否拆单
     */
    public boolean getIsNeedSplitter() {
        return this.isNeedSplitter;
    }

    public void setIsNeedSplitter(boolean isNeedSplitter) {
        this.isNeedSplitter = isNeedSplitter;
    }

    /**
     * 国际机票用 QTE运价Token
     */
    public String getReprincingToken() {
        return this.reprincingToken;
    }

    public void setReprincingToken(String reprincingToken) {
        this.reprincingToken = reprincingToken;
    }

    /**
     * 国际自己票用 满仓Token
     */
    public String getBookabilityToken() {
        return this.bookabilityToken;
    }

    public void setBookabilityToken(String bookabilityToken) {
        this.bookabilityToken = bookabilityToken;
    }

    /**
     * 验舱异步token
     */
    public String getBookabilityTokenNumber() {
        return this.bookabilityTokenNumber;
    }

    public void setBookabilityTokenNumber(String bookabilityTokenNumber) {
        this.bookabilityTokenNumber = bookabilityTokenNumber;
    }

    /**
     * 验价异步token
     */
    public String getRepricingTokenNumber() {
        return this.repricingTokenNumber;
    }

    public void setRepricingTokenNumber(String repricingTokenNumber) {
        this.repricingTokenNumber = repricingTokenNumber;
    }

    /**
     * 是否需要访问退改签接口获取退改签
     */
    public boolean getNeedGetFareRemark() {
        return this.needGetFareRemark;
    }

    public void setNeedGetFareRemark(boolean needGetFareRemark) {
        this.needGetFareRemark = needGetFareRemark;
    }

    /**
     * 国内机票休息室信息
     */
    public List<VipLounge> getVipLoungeList() {
        return this.vipLoungeList;
    }

    public void setVipLoungeList(List<VipLounge> vipLoungeList) {
        this.vipLoungeList = vipLoungeList;
    }

    /**
     * 是否在添加乘机人时需要重新查询 true需要，false不需要
     */
    public boolean getIsAddPassengerRequery() {
        return this.isAddPassengerRequery;
    }

    public void setIsAddPassengerRequery(boolean isAddPassengerRequery) {
        this.isAddPassengerRequery = isAddPassengerRequery;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final GaGetFlightBookingInfoResponse other = (GaGetFlightBookingInfoResponse)obj;
        return
            Objects.equal(this.responseStatus, other.responseStatus) && 
            Objects.equal(this.responseHead, other.responseHead) && 
            Objects.equal(this.fltProductInfoList, other.fltProductInfoList) && 
            Objects.equal(this.dFltPriceChangeInfo, other.dFltPriceChangeInfo) && 
            Objects.equal(this.aFltPriceChangeInfo, other.aFltPriceChangeInfo) && 
            Objects.equal(this.isPartial, other.isPartial) && 
            Objects.equal(this.appSlogan, other.appSlogan) && 
            Objects.equal(this.isNeedSplitter, other.isNeedSplitter) && 
            Objects.equal(this.reprincingToken, other.reprincingToken) && 
            Objects.equal(this.bookabilityToken, other.bookabilityToken) && 
            Objects.equal(this.bookabilityTokenNumber, other.bookabilityTokenNumber) && 
            Objects.equal(this.repricingTokenNumber, other.repricingTokenNumber) && 
            Objects.equal(this.needGetFareRemark, other.needGetFareRemark) && 
            Objects.equal(this.vipLoungeList, other.vipLoungeList) && 
            Objects.equal(this.isAddPassengerRequery, other.isAddPassengerRequery);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.responseStatus);
        result = 31 * result + Objects.hashCode(this.responseHead);
        result = 31 * result + Objects.hashCode(this.fltProductInfoList);
        result = 31 * result + Objects.hashCode(this.dFltPriceChangeInfo);
        result = 31 * result + Objects.hashCode(this.aFltPriceChangeInfo);
        result = 31 * result + Objects.hashCode(this.isPartial);
        result = 31 * result + Objects.hashCode(this.appSlogan);
        result = 31 * result + Objects.hashCode(this.isNeedSplitter);
        result = 31 * result + Objects.hashCode(this.reprincingToken);
        result = 31 * result + Objects.hashCode(this.bookabilityToken);
        result = 31 * result + Objects.hashCode(this.bookabilityTokenNumber);
        result = 31 * result + Objects.hashCode(this.repricingTokenNumber);
        result = 31 * result + Objects.hashCode(this.needGetFareRemark);
        result = 31 * result + Objects.hashCode(this.vipLoungeList);
        result = 31 * result + Objects.hashCode(this.isAddPassengerRequery);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("responseStatus", responseStatus)
            .add("responseHead", responseHead)
            .add("fltProductInfoList", fltProductInfoList)
            .add("dFltPriceChangeInfo", dFltPriceChangeInfo)
            .add("aFltPriceChangeInfo", aFltPriceChangeInfo)
            .add("isPartial", isPartial)
            .add("appSlogan", appSlogan)
            .add("isNeedSplitter", isNeedSplitter)
            .add("reprincingToken", reprincingToken)
            .add("bookabilityToken", bookabilityToken)
            .add("bookabilityTokenNumber", bookabilityTokenNumber)
            .add("repricingTokenNumber", repricingTokenNumber)
            .add("needGetFareRemark", needGetFareRemark)
            .add("vipLoungeList", vipLoungeList)
            .add("isAddPassengerRequery", isAddPassengerRequery)
            .toString();
    }
}