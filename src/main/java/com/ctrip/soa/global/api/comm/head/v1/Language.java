// Generated by eBay Common SDK Platform
package com.ctrip.soa.global.api.comm.head.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlEnumValue;

/**
 * 语言
 */
@XmlType(name = "Language")
@XmlEnum
@SuppressWarnings("all")
public enum Language {

    @XmlEnumValue("ENGLISH")
    ENGLISH(0, "ENGLISH"),

    @XmlEnumValue("JP")
    JP(1, "JP"),

    @XmlEnumValue("KR")
    KR(2, "KR"),

    @XmlEnumValue("FR")
    FR(3, "FR"),

    @XmlEnumValue("DE")
    DE(4, "DE"),

    @XmlEnumValue("ES")
    ES(5, "ES"),

    @XmlEnumValue("RU")
    RU(6, "RU"),

    @XmlEnumValue("TC")
    TC(7, "TC"),

    @XmlEnumValue("VN")
    VN(8, "VN"),

    @XmlEnumValue("ZH")
    ZH(9, "ZH"),

    @XmlEnumValue("SG")
    SG(10, "SG"),

    @XmlEnumValue("TH")
    TH(11, "TH"),

    @XmlEnumValue("MY")
    MY(12, "MY"),

    @XmlEnumValue("ID")
    ID(13, "ID"),

    @XmlEnumValue("TW")
    TW(14, "TW");

    private final int intValue;
    private final String value;

    Language(int intValue, String value) {
        this.intValue = intValue;
        this.value = value;
    }

    public int getValue() {
        return intValue;
    }

    @JsonValue
    public String value() {
        return value;
    }

    @JsonCreator
    public static Language fromValue(String v) {
        for (Language e: Language.values()) {
            if (e.value.equals(v)) {
                return e;
            }
        }
        throw new IllegalArgumentException(v);
    }

    public static Language findByValue(int value) {
        switch (value) {
            case 0:
                return ENGLISH;
            case 1:
                return JP;
            case 2:
                return KR;
            case 3:
                return FR;
            case 4:
                return DE;
            case 5:
                return ES;
            case 6:
                return RU;
            case 7:
                return TC;
            case 8:
                return VN;
            case 9:
                return ZH;
            case 10:
                return SG;
            case 11:
                return TH;
            case 12:
                return MY;
            case 13:
                return ID;
            case 14:
                return TW;
            default:
                return null;
        }
    }
}