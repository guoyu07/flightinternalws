/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.myflightstatelist.v1;

import com.ctrip.soa.global.api.comm.head.v1.Head;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 关注的机票list
 */
@DtoDoc("关注的机票list")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name = "MyFlightStateListRequest", namespace = "http://soa.ctrip.com/Global/API/MyFlightStateList/v1")
@XmlType(name = "MyFlightStateListRequest", propOrder = {
    "head",
    "airPort",
    "returnAirPortScreenInfos",
    "isInbound",
    "pageSize",
    "pageIndex",
    "direction"
})
@SuppressWarnings("all")
public class MyFlightStateListRequest  {

    private static final long serialVersionUID = 1L;

    public MyFlightStateListRequest(
        Head head, 
        String airPort, 
        boolean returnAirPortScreenInfos, 
        boolean isInbound, 
        Integer pageSize, 
        Integer pageIndex, 
        String direction) {
        this.head = head;
        this.airPort = airPort;
        this.returnAirPortScreenInfos = returnAirPortScreenInfos;
        this.isInbound = isInbound;
        this.pageSize = pageSize;
        this.pageIndex = pageIndex;
        this.direction = direction;
    }

    public MyFlightStateListRequest() {
    }

    @FieldDoc("SOA2.0请求头部信息")
    @JsonProperty("Head")
    @XmlElement(name = "Head")
    private Head head;

    @FieldDoc("机场")
    @JsonProperty("AirPort")
    @XmlElement(name = "AirPort")
    private String airPort;

    @FieldDoc("是否是进港航班，默认是false表示是出港航班")
    @JsonProperty("ReturnAirPortScreenInfos")
    @XmlElement(name = "ReturnAirPortScreenInfos")
    private boolean returnAirPortScreenInfos;

    @FieldDoc("是否显示机场大屏")
    @JsonProperty("IsInbound")
    @XmlElement(name = "IsInbound")
    private boolean isInbound;

    @FieldDoc("每页数据大小，如10，20等，默认为10")
    @JsonProperty("PageSize")
    @XmlElement(name = "PageSize", nillable = true)
    private Integer pageSize;

    @FieldDoc("页码，如：1、2、3")
    @JsonProperty("PageIndex")
    @XmlElement(name = "PageIndex", nillable = true)
    private Integer pageIndex;

    @FieldDoc("ASC,DESC")
    @JsonProperty("Direction")
    @XmlElement(name = "Direction")
    private String direction;

    /**
     * SOA2.0请求头部信息
     */
    public Head getHead() {
        return this.head;
    }

    public void setHead(Head head) {
        this.head = head;
    }

    /**
     * 机场
     */
    public String getAirPort() {
        return this.airPort;
    }

    public void setAirPort(String airPort) {
        this.airPort = airPort;
    }

    /**
     * 是否是进港航班，默认是false表示是出港航班
     */
    public boolean getReturnAirPortScreenInfos() {
        return this.returnAirPortScreenInfos;
    }

    public void setReturnAirPortScreenInfos(boolean returnAirPortScreenInfos) {
        this.returnAirPortScreenInfos = returnAirPortScreenInfos;
    }

    /**
     * 是否显示机场大屏
     */
    public boolean getIsInbound() {
        return this.isInbound;
    }

    public void setIsInbound(boolean isInbound) {
        this.isInbound = isInbound;
    }

    /**
     * 每页数据大小，如10，20等，默认为10
     */
    public Integer getPageSize() {
        return this.pageSize;
    }

    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    /**
     * 页码，如：1、2、3
     */
    public Integer getPageIndex() {
        return this.pageIndex;
    }

    public void setPageIndex(Integer pageIndex) {
        this.pageIndex = pageIndex;
    }

    /**
     * ASC,DESC
     */
    public String getDirection() {
        return this.direction;
    }

    public void setDirection(String direction) {
        this.direction = direction;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final MyFlightStateListRequest other = (MyFlightStateListRequest)obj;
        return
            Objects.equal(this.head, other.head) && 
            Objects.equal(this.airPort, other.airPort) && 
            Objects.equal(this.returnAirPortScreenInfos, other.returnAirPortScreenInfos) && 
            Objects.equal(this.isInbound, other.isInbound) && 
            Objects.equal(this.pageSize, other.pageSize) && 
            Objects.equal(this.pageIndex, other.pageIndex) && 
            Objects.equal(this.direction, other.direction);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.head);
        result = 31 * result + Objects.hashCode(this.airPort);
        result = 31 * result + Objects.hashCode(this.returnAirPortScreenInfos);
        result = 31 * result + Objects.hashCode(this.isInbound);
        result = 31 * result + Objects.hashCode(this.pageSize);
        result = 31 * result + Objects.hashCode(this.pageIndex);
        result = 31 * result + Objects.hashCode(this.direction);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("head", head)
            .add("airPort", airPort)
            .add("returnAirPortScreenInfos", returnAirPortScreenInfos)
            .add("isInbound", isInbound)
            .add("pageSize", pageSize)
            .add("pageIndex", pageIndex)
            .add("direction", direction)
            .toString();
    }
}