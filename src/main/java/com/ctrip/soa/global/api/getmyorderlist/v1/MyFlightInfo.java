/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.getmyorderlist.v1;

import com.ctrip.soa.global.api.flightcommon.v1.AirLineInfo;
import com.ctrip.soa.global.api.flightcommon.v1.AirPortInfo;
import com.ctrip.soa.global.api.flightcommon.v1.CityInfo;
import com.ctrip.soa.global.api.flightcommon.v1.TerminalInfo;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MyFlightInfo", propOrder = {
    "airline",
    "aCity",
    "aPort",
    "arriveTime",
    "arriveAirportBuilding",
    "dCity",
    "dPort",
    "takeOffTime",
    "departAirportBuilding",
    "flightNo",
    "isPartial",
    "segmentNo",
    "sequence"
})
@SuppressWarnings("all")
public class MyFlightInfo  {

    private static final long serialVersionUID = 1L;

    public MyFlightInfo(
        AirLineInfo airline, 
        CityInfo aCity, 
        AirPortInfo aPort, 
        long arriveTime, 
        TerminalInfo arriveAirportBuilding, 
        CityInfo dCity, 
        AirPortInfo dPort, 
        long takeOffTime, 
        TerminalInfo departAirportBuilding, 
        String flightNo, 
        String isPartial, 
        int segmentNo, 
        int sequence) {
        this.airline = airline;
        this.aCity = aCity;
        this.aPort = aPort;
        this.arriveTime = arriveTime;
        this.arriveAirportBuilding = arriveAirportBuilding;
        this.dCity = dCity;
        this.dPort = dPort;
        this.takeOffTime = takeOffTime;
        this.departAirportBuilding = departAirportBuilding;
        this.flightNo = flightNo;
        this.isPartial = isPartial;
        this.segmentNo = segmentNo;
        this.sequence = sequence;
    }

    public MyFlightInfo() {
    }

    @FieldDoc("航空公司")
    @JsonProperty("Airline")
    @XmlElement(name = "Airline")
    private AirLineInfo airline;

    @FieldDoc("到达城市ID")
    @JsonProperty("ACity")
    @XmlElement(name = "ACity")
    private CityInfo aCity;

    @FieldDoc("到达机场")
    @JsonProperty("APort")
    @XmlElement(name = "APort")
    private AirPortInfo aPort;

    @FieldDoc("到达时间")
    @JsonProperty("ArriveTime")
    @XmlElement(name = "ArriveTime")
    private long arriveTime;

    @FieldDoc("到达航站楼")
    @JsonProperty("ArriveAirportBuilding")
    @XmlElement(name = "ArriveAirportBuilding")
    private TerminalInfo arriveAirportBuilding;

    @FieldDoc("出发城市")
    @JsonProperty("DCity")
    @XmlElement(name = "DCity")
    private CityInfo dCity;

    @FieldDoc("出发机场")
    @JsonProperty("DPort")
    @XmlElement(name = "DPort")
    private AirPortInfo dPort;

    @FieldDoc("出发时间")
    @JsonProperty("TakeOffTime")
    @XmlElement(name = "TakeOffTime")
    private long takeOffTime;

    @FieldDoc("出发航站楼")
    @JsonProperty("DepartAirportBuilding")
    @XmlElement(name = "DepartAirportBuilding")
    private TerminalInfo departAirportBuilding;

    @FieldDoc("航班号")
    @JsonProperty("FlightNo")
    @XmlElement(name = "FlightNo")
    private String flightNo;

    @FieldDoc("是否包含弃程 Y/N(Y 包含， N 不包含)")
    @JsonProperty("IsPartial")
    @XmlElement(name = "IsPartial")
    private String isPartial;

    @FieldDoc("航段号")
    @JsonProperty("SegmentNo")
    @XmlElement(name = "SegmentNo")
    private int segmentNo;

    @FieldDoc("航程号")
    @JsonProperty("Sequence")
    @XmlElement(name = "Sequence")
    private int sequence;

    /**
     * 航空公司
     */
    public AirLineInfo getAirline() {
        return this.airline;
    }

    public void setAirline(AirLineInfo airline) {
        this.airline = airline;
    }

    /**
     * 到达城市ID
     */
    public CityInfo getACity() {
        return this.aCity;
    }

    public void setACity(CityInfo aCity) {
        this.aCity = aCity;
    }

    /**
     * 到达机场
     */
    public AirPortInfo getAPort() {
        return this.aPort;
    }

    public void setAPort(AirPortInfo aPort) {
        this.aPort = aPort;
    }

    /**
     * 到达时间
     */
    public long getArriveTime() {
        return this.arriveTime;
    }

    public void setArriveTime(long arriveTime) {
        this.arriveTime = arriveTime;
    }

    /**
     * 到达航站楼
     */
    public TerminalInfo getArriveAirportBuilding() {
        return this.arriveAirportBuilding;
    }

    public void setArriveAirportBuilding(TerminalInfo arriveAirportBuilding) {
        this.arriveAirportBuilding = arriveAirportBuilding;
    }

    /**
     * 出发城市
     */
    public CityInfo getDCity() {
        return this.dCity;
    }

    public void setDCity(CityInfo dCity) {
        this.dCity = dCity;
    }

    /**
     * 出发机场
     */
    public AirPortInfo getDPort() {
        return this.dPort;
    }

    public void setDPort(AirPortInfo dPort) {
        this.dPort = dPort;
    }

    /**
     * 出发时间
     */
    public long getTakeOffTime() {
        return this.takeOffTime;
    }

    public void setTakeOffTime(long takeOffTime) {
        this.takeOffTime = takeOffTime;
    }

    /**
     * 出发航站楼
     */
    public TerminalInfo getDepartAirportBuilding() {
        return this.departAirportBuilding;
    }

    public void setDepartAirportBuilding(TerminalInfo departAirportBuilding) {
        this.departAirportBuilding = departAirportBuilding;
    }

    /**
     * 航班号
     */
    public String getFlightNo() {
        return this.flightNo;
    }

    public void setFlightNo(String flightNo) {
        this.flightNo = flightNo;
    }

    /**
     * 是否包含弃程 Y/N(Y 包含， N 不包含)
     */
    public String getIsPartial() {
        return this.isPartial;
    }

    public void setIsPartial(String isPartial) {
        this.isPartial = isPartial;
    }

    /**
     * 航段号
     */
    public int getSegmentNo() {
        return this.segmentNo;
    }

    public void setSegmentNo(int segmentNo) {
        this.segmentNo = segmentNo;
    }

    /**
     * 航程号
     */
    public int getSequence() {
        return this.sequence;
    }

    public void setSequence(int sequence) {
        this.sequence = sequence;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final MyFlightInfo other = (MyFlightInfo)obj;
        return
            Objects.equal(this.airline, other.airline) && 
            Objects.equal(this.aCity, other.aCity) && 
            Objects.equal(this.aPort, other.aPort) && 
            Objects.equal(this.arriveTime, other.arriveTime) && 
            Objects.equal(this.arriveAirportBuilding, other.arriveAirportBuilding) && 
            Objects.equal(this.dCity, other.dCity) && 
            Objects.equal(this.dPort, other.dPort) && 
            Objects.equal(this.takeOffTime, other.takeOffTime) && 
            Objects.equal(this.departAirportBuilding, other.departAirportBuilding) && 
            Objects.equal(this.flightNo, other.flightNo) && 
            Objects.equal(this.isPartial, other.isPartial) && 
            Objects.equal(this.segmentNo, other.segmentNo) && 
            Objects.equal(this.sequence, other.sequence);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.airline);
        result = 31 * result + Objects.hashCode(this.aCity);
        result = 31 * result + Objects.hashCode(this.aPort);
        result = 31 * result + Objects.hashCode(this.arriveTime);
        result = 31 * result + Objects.hashCode(this.arriveAirportBuilding);
        result = 31 * result + Objects.hashCode(this.dCity);
        result = 31 * result + Objects.hashCode(this.dPort);
        result = 31 * result + Objects.hashCode(this.takeOffTime);
        result = 31 * result + Objects.hashCode(this.departAirportBuilding);
        result = 31 * result + Objects.hashCode(this.flightNo);
        result = 31 * result + Objects.hashCode(this.isPartial);
        result = 31 * result + Objects.hashCode(this.segmentNo);
        result = 31 * result + Objects.hashCode(this.sequence);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("airline", airline)
            .add("aCity", aCity)
            .add("aPort", aPort)
            .add("arriveTime", arriveTime)
            .add("arriveAirportBuilding", arriveAirportBuilding)
            .add("dCity", dCity)
            .add("dPort", dPort)
            .add("takeOffTime", takeOffTime)
            .add("departAirportBuilding", departAirportBuilding)
            .add("flightNo", flightNo)
            .add("isPartial", isPartial)
            .add("segmentNo", segmentNo)
            .add("sequence", sequence)
            .toString();
    }
}