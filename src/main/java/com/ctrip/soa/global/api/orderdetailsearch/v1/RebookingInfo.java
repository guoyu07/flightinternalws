/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.orderdetailsearch.v1;

import com.ctrip.soa.global.api.flightcommon.v1.GaPassengerInfo;
import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 改签信息
 */
@DtoDoc("改签信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RebookingInfo", propOrder = {
    "rebookingApplicationID",
    "orderID",
    "applicationStatus",
    "requestTime",
    "payExternalNo",
    "fCardServiceFee",
    "paymentDeadline",
    "baggageRemark",
    "flightDescription",
    "airline",
    "bookSeatType",
    "rebookingContactInfo",
    "rebookingFlightItemList",
    "rebookingNewFlightItemList",
    "rebookingPassengerItemList",
    "reookingPayDetailInfo",
    "rebookNeedPay",
    "payStatus"
})
@SuppressWarnings("all")
public class RebookingInfo  {

    private static final long serialVersionUID = 1L;

    public RebookingInfo(
        String rebookingApplicationID, 
        long orderID, 
        String applicationStatus, 
        Calendar requestTime, 
        String payExternalNo, 
        BigDecimal fCardServiceFee, 
        Calendar paymentDeadline, 
        String baggageRemark, 
        String flightDescription, 
        String airline, 
        String bookSeatType, 
        ContactInfo rebookingContactInfo, 
        List<FlightOrigDestInfo> rebookingFlightItemList, 
        List<FlightOrigDestInfo> rebookingNewFlightItemList, 
        List<GaPassengerInfo> rebookingPassengerItemList, 
        RebookingPayDetailInfo reookingPayDetailInfo, 
        boolean rebookNeedPay, 
        String payStatus) {
        this.rebookingApplicationID = rebookingApplicationID;
        this.orderID = orderID;
        this.applicationStatus = applicationStatus;
        this.requestTime = requestTime;
        this.payExternalNo = payExternalNo;
        this.fCardServiceFee = fCardServiceFee;
        this.paymentDeadline = paymentDeadline;
        this.baggageRemark = baggageRemark;
        this.flightDescription = flightDescription;
        this.airline = airline;
        this.bookSeatType = bookSeatType;
        this.rebookingContactInfo = rebookingContactInfo;
        this.rebookingFlightItemList = rebookingFlightItemList;
        this.rebookingNewFlightItemList = rebookingNewFlightItemList;
        this.rebookingPassengerItemList = rebookingPassengerItemList;
        this.reookingPayDetailInfo = reookingPayDetailInfo;
        this.rebookNeedPay = rebookNeedPay;
        this.payStatus = payStatus;
    }

    public RebookingInfo() {
    }

    @FieldDoc("改签申请编号")
    @JsonProperty("RebookingApplicationID")
    @XmlElement(name = "RebookingApplicationID")
    private String rebookingApplicationID;

    @FieldDoc("机票订单号")
    @JsonProperty("OrderID")
    @XmlElement(name = "OrderID")
    private long orderID;

    @FieldDoc("改签单状态.W 等待处理  P 处理中  S 改签成功 F 改签失败")
    @JsonProperty("ApplicationStatus")
    @XmlElement(name = "ApplicationStatus")
    private String applicationStatus;

    @FieldDoc("申请时间")
    @JsonProperty("RequestTime")
    @XmlElement(name = "RequestTime")
    private Calendar requestTime;

    @FieldDoc("网关支付ExternalNO")
    @JsonProperty("PayExternalNo")
    @XmlElement(name = "PayExternalNo")
    private String payExternalNo;

    @FieldDoc("外卡服务费")
    @JsonProperty("FCardServiceFee")
    @XmlElement(name = "FCardServiceFee")
    private BigDecimal fCardServiceFee;

    @FieldDoc("支付时限")
    @JsonProperty("PaymentDeadline")
    @XmlElement(name = "PaymentDeadline")
    private Calendar paymentDeadline;

    @FieldDoc("行李额说明")
    @JsonProperty("BaggageRemark")
    @XmlElement(name = "BaggageRemark")
    private String baggageRemark;

    @FieldDoc("航班描述")
    @JsonProperty("FlightDescription")
    @XmlElement(name = "FlightDescription")
    private String flightDescription;

    @FieldDoc("航空公司二字码")
    @JsonProperty("Airline")
    @XmlElement(name = "Airline")
    private String airline;

    @FieldDoc("订位类型（GDS-WS\ 1A-WS\ TS-WS\ 1B-WS\ ZY-WS\ TF-WS\HX-WS）")
    @JsonProperty("BookSeatType")
    @XmlElement(name = "BookSeatType")
    private String bookSeatType;

    @FieldDoc("RebookingContactInfo")
    @JsonProperty("RebookingContactInfo")
    @XmlElement(name = "RebookingContactInfo")
    private ContactInfo rebookingContactInfo;

    @FieldDoc("改签原始航班信息")
    @JsonProperty("RebookingFlightItemList")
    @XmlElement(name = "RebookingFlightItemList")
    private List<FlightOrigDestInfo> rebookingFlightItemList;

    @FieldDoc("改签新航班信息")
    @JsonProperty("RebookingNewFlightItemList")
    @XmlElement(name = "RebookingNewFlightItemList")
    private List<FlightOrigDestInfo> rebookingNewFlightItemList;

    @FieldDoc("改签乘客信息")
    @JsonProperty("RebookingPassengerItemList")
    @XmlElement(name = "RebookingPassengerItemList")
    private List<GaPassengerInfo> rebookingPassengerItemList;

    @FieldDoc("改签费用信息")
    @JsonProperty("ReookingPayDetailInfo")
    @XmlElement(name = "ReookingPayDetailInfo")
    private RebookingPayDetailInfo reookingPayDetailInfo;

    @FieldDoc("是否可以支付")
    @JsonProperty("RebookNeedPay")
    @XmlElement(name = "RebookNeedPay")
    private boolean rebookNeedPay;

    @FieldDoc("支付状态.W 待支付 S 支付成功 R 退款成功 F 支付失败")
    @JsonProperty("PayStatus")
    @XmlElement(name = "PayStatus")
    private String payStatus;

    /**
     * 改签申请编号
     */
    public String getRebookingApplicationID() {
        return this.rebookingApplicationID;
    }

    public void setRebookingApplicationID(String rebookingApplicationID) {
        this.rebookingApplicationID = rebookingApplicationID;
    }

    /**
     * 机票订单号
     */
    public long getOrderID() {
        return this.orderID;
    }

    public void setOrderID(long orderID) {
        this.orderID = orderID;
    }

    /**
     * 改签单状态.W 等待处理  P 处理中  S 改签成功 F 改签失败
     */
    public String getApplicationStatus() {
        return this.applicationStatus;
    }

    public void setApplicationStatus(String applicationStatus) {
        this.applicationStatus = applicationStatus;
    }

    /**
     * 申请时间
     */
    public Calendar getRequestTime() {
        return this.requestTime;
    }

    public void setRequestTime(Calendar requestTime) {
        this.requestTime = requestTime;
    }

    /**
     * 网关支付ExternalNO
     */
    public String getPayExternalNo() {
        return this.payExternalNo;
    }

    public void setPayExternalNo(String payExternalNo) {
        this.payExternalNo = payExternalNo;
    }

    /**
     * 外卡服务费
     */
    public BigDecimal getFCardServiceFee() {
        return this.fCardServiceFee;
    }

    public void setFCardServiceFee(BigDecimal fCardServiceFee) {
        this.fCardServiceFee = fCardServiceFee;
    }

    /**
     * 支付时限
     */
    public Calendar getPaymentDeadline() {
        return this.paymentDeadline;
    }

    public void setPaymentDeadline(Calendar paymentDeadline) {
        this.paymentDeadline = paymentDeadline;
    }

    /**
     * 行李额说明
     */
    public String getBaggageRemark() {
        return this.baggageRemark;
    }

    public void setBaggageRemark(String baggageRemark) {
        this.baggageRemark = baggageRemark;
    }

    /**
     * 航班描述
     */
    public String getFlightDescription() {
        return this.flightDescription;
    }

    public void setFlightDescription(String flightDescription) {
        this.flightDescription = flightDescription;
    }

    /**
     * 航空公司二字码
     */
    public String getAirline() {
        return this.airline;
    }

    public void setAirline(String airline) {
        this.airline = airline;
    }

    /**
     * 订位类型（GDS-WS\ 1A-WS\ TS-WS\ 1B-WS\ ZY-WS\ TF-WS\HX-WS）
     */
    public String getBookSeatType() {
        return this.bookSeatType;
    }

    public void setBookSeatType(String bookSeatType) {
        this.bookSeatType = bookSeatType;
    }

    /**
     * RebookingContactInfo
     */
    public ContactInfo getRebookingContactInfo() {
        return this.rebookingContactInfo;
    }

    public void setRebookingContactInfo(ContactInfo rebookingContactInfo) {
        this.rebookingContactInfo = rebookingContactInfo;
    }

    /**
     * 改签原始航班信息
     */
    public List<FlightOrigDestInfo> getRebookingFlightItemList() {
        return this.rebookingFlightItemList;
    }

    public void setRebookingFlightItemList(List<FlightOrigDestInfo> rebookingFlightItemList) {
        this.rebookingFlightItemList = rebookingFlightItemList;
    }

    /**
     * 改签新航班信息
     */
    public List<FlightOrigDestInfo> getRebookingNewFlightItemList() {
        return this.rebookingNewFlightItemList;
    }

    public void setRebookingNewFlightItemList(List<FlightOrigDestInfo> rebookingNewFlightItemList) {
        this.rebookingNewFlightItemList = rebookingNewFlightItemList;
    }

    /**
     * 改签乘客信息
     */
    public List<GaPassengerInfo> getRebookingPassengerItemList() {
        return this.rebookingPassengerItemList;
    }

    public void setRebookingPassengerItemList(List<GaPassengerInfo> rebookingPassengerItemList) {
        this.rebookingPassengerItemList = rebookingPassengerItemList;
    }

    /**
     * 改签费用信息
     */
    public RebookingPayDetailInfo getReookingPayDetailInfo() {
        return this.reookingPayDetailInfo;
    }

    public void setReookingPayDetailInfo(RebookingPayDetailInfo reookingPayDetailInfo) {
        this.reookingPayDetailInfo = reookingPayDetailInfo;
    }

    /**
     * 是否可以支付
     */
    public boolean getRebookNeedPay() {
        return this.rebookNeedPay;
    }

    public void setRebookNeedPay(boolean rebookNeedPay) {
        this.rebookNeedPay = rebookNeedPay;
    }

    /**
     * 支付状态.W 待支付 S 支付成功 R 退款成功 F 支付失败
     */
    public String getPayStatus() {
        return this.payStatus;
    }

    public void setPayStatus(String payStatus) {
        this.payStatus = payStatus;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final RebookingInfo other = (RebookingInfo)obj;
        return
            Objects.equal(this.rebookingApplicationID, other.rebookingApplicationID) && 
            Objects.equal(this.orderID, other.orderID) && 
            Objects.equal(this.applicationStatus, other.applicationStatus) && 
            Objects.equal(this.requestTime, other.requestTime) && 
            Objects.equal(this.payExternalNo, other.payExternalNo) && 
            Objects.equal(this.fCardServiceFee, other.fCardServiceFee) && 
            Objects.equal(this.paymentDeadline, other.paymentDeadline) && 
            Objects.equal(this.baggageRemark, other.baggageRemark) && 
            Objects.equal(this.flightDescription, other.flightDescription) && 
            Objects.equal(this.airline, other.airline) && 
            Objects.equal(this.bookSeatType, other.bookSeatType) && 
            Objects.equal(this.rebookingContactInfo, other.rebookingContactInfo) && 
            Objects.equal(this.rebookingFlightItemList, other.rebookingFlightItemList) && 
            Objects.equal(this.rebookingNewFlightItemList, other.rebookingNewFlightItemList) && 
            Objects.equal(this.rebookingPassengerItemList, other.rebookingPassengerItemList) && 
            Objects.equal(this.reookingPayDetailInfo, other.reookingPayDetailInfo) && 
            Objects.equal(this.rebookNeedPay, other.rebookNeedPay) && 
            Objects.equal(this.payStatus, other.payStatus);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.rebookingApplicationID);
        result = 31 * result + Objects.hashCode(this.orderID);
        result = 31 * result + Objects.hashCode(this.applicationStatus);
        result = 31 * result + Objects.hashCode(this.requestTime);
        result = 31 * result + Objects.hashCode(this.payExternalNo);
        result = 31 * result + Objects.hashCode(this.fCardServiceFee);
        result = 31 * result + Objects.hashCode(this.paymentDeadline);
        result = 31 * result + Objects.hashCode(this.baggageRemark);
        result = 31 * result + Objects.hashCode(this.flightDescription);
        result = 31 * result + Objects.hashCode(this.airline);
        result = 31 * result + Objects.hashCode(this.bookSeatType);
        result = 31 * result + Objects.hashCode(this.rebookingContactInfo);
        result = 31 * result + Objects.hashCode(this.rebookingFlightItemList);
        result = 31 * result + Objects.hashCode(this.rebookingNewFlightItemList);
        result = 31 * result + Objects.hashCode(this.rebookingPassengerItemList);
        result = 31 * result + Objects.hashCode(this.reookingPayDetailInfo);
        result = 31 * result + Objects.hashCode(this.rebookNeedPay);
        result = 31 * result + Objects.hashCode(this.payStatus);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("rebookingApplicationID", rebookingApplicationID)
            .add("orderID", orderID)
            .add("applicationStatus", applicationStatus)
            .add("requestTime", requestTime)
            .add("payExternalNo", payExternalNo)
            .add("fCardServiceFee", fCardServiceFee)
            .add("paymentDeadline", paymentDeadline)
            .add("baggageRemark", baggageRemark)
            .add("flightDescription", flightDescription)
            .add("airline", airline)
            .add("bookSeatType", bookSeatType)
            .add("rebookingContactInfo", rebookingContactInfo)
            .add("rebookingFlightItemList", rebookingFlightItemList)
            .add("rebookingNewFlightItemList", rebookingNewFlightItemList)
            .add("rebookingPassengerItemList", rebookingPassengerItemList)
            .add("reookingPayDetailInfo", reookingPayDetailInfo)
            .add("rebookNeedPay", rebookNeedPay)
            .add("payStatus", payStatus)
            .toString();
    }
}