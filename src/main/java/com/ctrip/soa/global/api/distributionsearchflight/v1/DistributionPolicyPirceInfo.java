/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.distributionsearchflight.v1;

import com.ctriposs.baiji.rpc.common.apidoc.DtoDoc;
import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * 退改签信息
 */
@DtoDoc("退改签信息")
@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DistributionPolicyPirceInfo", propOrder = {
    "ticketAirline",
    "distributionTravelerEligibilityCodeType",
    "airChangeTagList",
    "refNote",
    "shoppingInfoID",
    "rerNote",
    "endNote",
    "note",
    "noteCN",
    "noteExt",
    "baggageNote",
    "baggageNoteCN",
    "containFreeBaggage",
    "hasBaggageService",
    "validDate",
    "fltProductType",
    "productSource",
    "fltProductChannel",
    "distributionFlightProductDescriptionInfo",
    "limitTitle",
    "limit",
    "nationalityInclude",
    "nationalityExclude",
    "minPassengerCount",
    "maxPassengerCount",
    "ageRestriction",
    "subClass",
    "clazz",
    "productClassInfoList",
    "laveTicket",
    "isKAllow",
    "isNeedSplitter",
    "remarkSearchKey",
    "priceInfoList",
    "productKeyInfo",
    "needGetFareRemark",
    "flightClassLabel",
    "nonRef",
    "nonRer",
    "shoppingID"
})
@SuppressWarnings("all")
public class DistributionPolicyPirceInfo  {

    private static final long serialVersionUID = 1L;

    public DistributionPolicyPirceInfo(
        String ticketAirline, 
        DistributionTravelerEligibilityCodeType distributionTravelerEligibilityCodeType, 
        List<String> airChangeTagList, 
        String refNote, 
        String shoppingInfoID, 
        String rerNote, 
        String endNote, 
        String note, 
        String noteCN, 
        String noteExt, 
        String baggageNote, 
        String baggageNoteCN, 
        boolean containFreeBaggage, 
        boolean hasBaggageService, 
        String validDate, 
        String fltProductType, 
        String productSource, 
        String fltProductChannel, 
        DistributionFlightProductDescriptionInfo distributionFlightProductDescriptionInfo, 
        String limitTitle, 
        List<DistributionLimitInfo> limit, 
        String nationalityInclude, 
        String nationalityExclude, 
        int minPassengerCount, 
        int maxPassengerCount, 
        String ageRestriction, 
        String subClass, 
        DistributionCabinClassType clazz, 
        List<DistributionProductClassInfo> productClassInfoList, 
        int laveTicket, 
        boolean isKAllow, 
        boolean isNeedSplitter, 
        String remarkSearchKey, 
        List<DistributionSearhFlightPorductPriceInfo> priceInfoList, 
        DistributionProductKeyInfo productKeyInfo, 
        boolean needGetFareRemark, 
        String flightClassLabel, 
        boolean nonRef, 
        boolean nonRer, 
        String shoppingID) {
        this.ticketAirline = ticketAirline;
        this.distributionTravelerEligibilityCodeType = distributionTravelerEligibilityCodeType;
        this.airChangeTagList = airChangeTagList;
        this.refNote = refNote;
        this.shoppingInfoID = shoppingInfoID;
        this.rerNote = rerNote;
        this.endNote = endNote;
        this.note = note;
        this.noteCN = noteCN;
        this.noteExt = noteExt;
        this.baggageNote = baggageNote;
        this.baggageNoteCN = baggageNoteCN;
        this.containFreeBaggage = containFreeBaggage;
        this.hasBaggageService = hasBaggageService;
        this.validDate = validDate;
        this.fltProductType = fltProductType;
        this.productSource = productSource;
        this.fltProductChannel = fltProductChannel;
        this.distributionFlightProductDescriptionInfo = distributionFlightProductDescriptionInfo;
        this.limitTitle = limitTitle;
        this.limit = limit;
        this.nationalityInclude = nationalityInclude;
        this.nationalityExclude = nationalityExclude;
        this.minPassengerCount = minPassengerCount;
        this.maxPassengerCount = maxPassengerCount;
        this.ageRestriction = ageRestriction;
        this.subClass = subClass;
        this.clazz = clazz;
        this.productClassInfoList = productClassInfoList;
        this.laveTicket = laveTicket;
        this.isKAllow = isKAllow;
        this.isNeedSplitter = isNeedSplitter;
        this.remarkSearchKey = remarkSearchKey;
        this.priceInfoList = priceInfoList;
        this.productKeyInfo = productKeyInfo;
        this.needGetFareRemark = needGetFareRemark;
        this.flightClassLabel = flightClassLabel;
        this.nonRef = nonRef;
        this.nonRer = nonRer;
        this.shoppingID = shoppingID;
    }

    public DistributionPolicyPirceInfo() {
    }

    @FieldDoc("出票航空公司")
    @JsonProperty("TicketAirline")
    @XmlElement(name = "TicketAirline")
    private String ticketAirline;

    @FieldDoc("乘客资质")
    @JsonProperty("DistributionTravelerEligibilityCodeType")
    @XmlElement(name = "DistributionTravelerEligibilityCodeType")
    private DistributionTravelerEligibilityCodeType distributionTravelerEligibilityCodeType;

    @FieldDoc("退改签标签")
    @JsonProperty("AirChangeTagList")
    @XmlElement(name = "AirChangeTagList")
    private List<String> airChangeTagList;

    @FieldDoc("退-描述")
    @JsonProperty("RefNote")
    @XmlElement(name = "RefNote")
    private String refNote;

    @FieldDoc("所选产品的唯一商品编号")
    @JsonProperty("ShoppingInfoID")
    @XmlElement(name = "ShoppingInfoID")
    private String shoppingInfoID;

    @FieldDoc("改-描述")
    @JsonProperty("RerNote")
    @XmlElement(name = "RerNote")
    private String rerNote;

    @FieldDoc("转-描述")
    @JsonProperty("EndNote")
    @XmlElement(name = "EndNote")
    private String endNote;

    @FieldDoc("特殊描述")
    @JsonProperty("Note")
    @XmlElement(name = "Note")
    private String note;

    @FieldDoc("特殊描述(中文)")
    @JsonProperty("NoteCN")
    @XmlElement(name = "NoteCN")
    private String noteCN;

    @FieldDoc("特殊描述(其他扩展多语言内容)")
    @JsonProperty("NoteExt")
    @XmlElement(name = "NoteExt")
    private String noteExt;

    @FieldDoc("行李额描述")
    @JsonProperty("BaggageNote")
    @XmlElement(name = "BaggageNote")
    private String baggageNote;

    @FieldDoc("行李额描述(中文)")
    @JsonProperty("BaggageNoteCN")
    @XmlElement(name = "BaggageNoteCN")
    private String baggageNoteCN;

    @FieldDoc("是否无行李额")
    @JsonProperty("ContainFreeBaggage")
    @XmlElement(name = "ContainFreeBaggage")
    private boolean containFreeBaggage;

    @FieldDoc("是否允许购买行李额")
    @JsonProperty("HasBaggageService")
    @XmlElement(name = "HasBaggageService")
    private boolean hasBaggageService;

    @FieldDoc("机票有效期")
    @JsonProperty("ValidDate")
    @XmlElement(name = "ValidDate")
    private String validDate;

    @FieldDoc("channel类型 国际代表GDS类型，国内代表青年特、老年特等产品类型")
    @JsonProperty("FltProductType")
    @XmlElement(name = "FltProductType")
    private String fltProductType;

    @FieldDoc("产品ID")
    @JsonProperty("ProductSource")
    @XmlElement(name = "ProductSource")
    private String productSource;

    @FieldDoc("国际channel类型 WS-GDS这种")
    @JsonProperty("FltProductChannel")
    @XmlElement(name = "FltProductChannel")
    private String fltProductChannel;

    @FieldDoc("产品描述")
    @JsonProperty("DistributionFlightProductDescriptionInfo")
    @XmlElement(name = "DistributionFlightProductDescriptionInfo")
    private DistributionFlightProductDescriptionInfo distributionFlightProductDescriptionInfo;

    @FieldDoc("限制Title")
    @JsonProperty("LimitTitle")
    @XmlElement(name = "LimitTitle")
    private String limitTitle;

    @FieldDoc("购买限制")
    @JsonProperty("Limit")
    @XmlElement(name = "Limit")
    private List<DistributionLimitInfo> limit;

    @FieldDoc("允许的国籍")
    @JsonProperty("NationalityInclude")
    @XmlElement(name = "NationalityInclude")
    private String nationalityInclude;

    @FieldDoc("不允许的国籍")
    @JsonProperty("NationalityExclude")
    @XmlElement(name = "NationalityExclude")
    private String nationalityExclude;

    @FieldDoc("最少预定乘机人数")
    @JsonProperty("MinPassengerCount")
    @XmlElement(name = "MinPassengerCount")
    private int minPassengerCount;

    @FieldDoc("最大预定乘机人数")
    @JsonProperty("MaxPassengerCount")
    @XmlElement(name = "MaxPassengerCount")
    private int maxPassengerCount;

    @FieldDoc("年龄限制格式：min-max")
    @JsonProperty("AgeRestriction")
    @XmlElement(name = "AgeRestriction")
    private String ageRestriction;

    @FieldDoc("子舱位")
    @JsonProperty("SubClass")
    @XmlElement(name = "SubClass")
    private String subClass;

    @FieldDoc("主舱位")
    @JsonProperty("Class")
    @XmlElement(name = "Class")
    private DistributionCabinClassType clazz;

    @FieldDoc("当前运价的当前航段，所有舱位信息")
    @JsonProperty("ProductClassInfoList")
    @XmlElement(name = "ProductClassInfoList")
    private List<DistributionProductClassInfo> productClassInfoList;

    @FieldDoc("剩余票量")
    @JsonProperty("LaveTicket")
    @XmlElement(name = "LaveTicket")
    private int laveTicket;

    @FieldDoc("是否K位")
    @JsonProperty("IsKAllow")
    @XmlElement(name = "IsKAllow")
    private boolean isKAllow;

    @FieldDoc("和已选择的第一程相匹配时，是否需要拆单（不包括成人、儿童拆单逻辑）")
    @JsonProperty("IsNeedSplitter")
    @XmlElement(name = "IsNeedSplitter")
    private boolean isNeedSplitter;

    @FieldDoc("国内机票调用退改签接口关键参数")
    @JsonProperty("RemarkSearchKey")
    @XmlElement(name = "RemarkSearchKey")
    private String remarkSearchKey;

    @FieldDoc("价格信息")
    @JsonProperty("PriceInfoList")
    @XmlElement(name = "PriceInfoList")
    private List<DistributionSearhFlightPorductPriceInfo> priceInfoList;

    @FieldDoc("产品关键参数")
    @JsonProperty("ProductKeyInfo")
    @XmlElement(name = "ProductKeyInfo")
    private DistributionProductKeyInfo productKeyInfo;

    @FieldDoc("是否需要调用退改签接口获取信息" +
            "只有多舱位查询时才会返回正确结果" +
            "列表查询永远是false" +
            "因为列表查询还没真正定位运价信息")
    @JsonProperty("NeedGetFareRemark")
    @XmlElement(name = "NeedGetFareRemark")
    private boolean needGetFareRemark;

    @FieldDoc("行运价包含该的所有航段的主舱 以“+”号分隔，多运价查询时输出")
    @JsonProperty("FlightClassLabel")
    @XmlElement(name = "FlightClassLabel")
    private String flightClassLabel;

    @FieldDoc("政策是否不可退")
    @JsonProperty("NonRef")
    @XmlElement(name = "NonRef")
    private boolean nonRef;

    @FieldDoc("政策是否不可改")
    @JsonProperty("NonRer")
    @XmlElement(name = "NonRer")
    private boolean nonRer;

    @FieldDoc("所选产品的唯一商品编号,精简化接口扩展了定位参数,需要ShoppingInfoID和ShoppingID一起,跳转列表需要用ShoppingID,跳转填写页需要ShoppingInfoID")
    @JsonProperty("ShoppingID")
    @XmlElement(name = "ShoppingID")
    private String shoppingID;

    /**
     * 出票航空公司
     */
    public String getTicketAirline() {
        return this.ticketAirline;
    }

    public void setTicketAirline(String ticketAirline) {
        this.ticketAirline = ticketAirline;
    }

    /**
     * 乘客资质
     */
    public DistributionTravelerEligibilityCodeType getDistributionTravelerEligibilityCodeType() {
        return this.distributionTravelerEligibilityCodeType;
    }

    public void setDistributionTravelerEligibilityCodeType(DistributionTravelerEligibilityCodeType distributionTravelerEligibilityCodeType) {
        this.distributionTravelerEligibilityCodeType = distributionTravelerEligibilityCodeType;
    }

    /**
     * 退改签标签
     */
    public List<String> getAirChangeTagList() {
        return this.airChangeTagList;
    }

    public void setAirChangeTagList(List<String> airChangeTagList) {
        this.airChangeTagList = airChangeTagList;
    }

    /**
     * 退-描述
     */
    public String getRefNote() {
        return this.refNote;
    }

    public void setRefNote(String refNote) {
        this.refNote = refNote;
    }

    /**
     * 所选产品的唯一商品编号
     */
    public String getShoppingInfoID() {
        return this.shoppingInfoID;
    }

    public void setShoppingInfoID(String shoppingInfoID) {
        this.shoppingInfoID = shoppingInfoID;
    }

    /**
     * 改-描述
     */
    public String getRerNote() {
        return this.rerNote;
    }

    public void setRerNote(String rerNote) {
        this.rerNote = rerNote;
    }

    /**
     * 转-描述
     */
    public String getEndNote() {
        return this.endNote;
    }

    public void setEndNote(String endNote) {
        this.endNote = endNote;
    }

    /**
     * 特殊描述
     */
    public String getNote() {
        return this.note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    /**
     * 特殊描述(中文)
     */
    public String getNoteCN() {
        return this.noteCN;
    }

    public void setNoteCN(String noteCN) {
        this.noteCN = noteCN;
    }

    /**
     * 特殊描述(其他扩展多语言内容)
     */
    public String getNoteExt() {
        return this.noteExt;
    }

    public void setNoteExt(String noteExt) {
        this.noteExt = noteExt;
    }

    /**
     * 行李额描述
     */
    public String getBaggageNote() {
        return this.baggageNote;
    }

    public void setBaggageNote(String baggageNote) {
        this.baggageNote = baggageNote;
    }

    /**
     * 行李额描述(中文)
     */
    public String getBaggageNoteCN() {
        return this.baggageNoteCN;
    }

    public void setBaggageNoteCN(String baggageNoteCN) {
        this.baggageNoteCN = baggageNoteCN;
    }

    /**
     * 是否无行李额
     */
    public boolean getContainFreeBaggage() {
        return this.containFreeBaggage;
    }

    public void setContainFreeBaggage(boolean containFreeBaggage) {
        this.containFreeBaggage = containFreeBaggage;
    }

    /**
     * 是否允许购买行李额
     */
    public boolean getHasBaggageService() {
        return this.hasBaggageService;
    }

    public void setHasBaggageService(boolean hasBaggageService) {
        this.hasBaggageService = hasBaggageService;
    }

    /**
     * 机票有效期
     */
    public String getValidDate() {
        return this.validDate;
    }

    public void setValidDate(String validDate) {
        this.validDate = validDate;
    }

    /**
     * channel类型 国际代表GDS类型，国内代表青年特、老年特等产品类型
     */
    public String getFltProductType() {
        return this.fltProductType;
    }

    public void setFltProductType(String fltProductType) {
        this.fltProductType = fltProductType;
    }

    /**
     * 产品ID
     */
    public String getProductSource() {
        return this.productSource;
    }

    public void setProductSource(String productSource) {
        this.productSource = productSource;
    }

    /**
     * 国际channel类型 WS-GDS这种
     */
    public String getFltProductChannel() {
        return this.fltProductChannel;
    }

    public void setFltProductChannel(String fltProductChannel) {
        this.fltProductChannel = fltProductChannel;
    }

    /**
     * 产品描述
     */
    public DistributionFlightProductDescriptionInfo getDistributionFlightProductDescriptionInfo() {
        return this.distributionFlightProductDescriptionInfo;
    }

    public void setDistributionFlightProductDescriptionInfo(DistributionFlightProductDescriptionInfo distributionFlightProductDescriptionInfo) {
        this.distributionFlightProductDescriptionInfo = distributionFlightProductDescriptionInfo;
    }

    /**
     * 限制Title
     */
    public String getLimitTitle() {
        return this.limitTitle;
    }

    public void setLimitTitle(String limitTitle) {
        this.limitTitle = limitTitle;
    }

    /**
     * 购买限制
     */
    public List<DistributionLimitInfo> getLimit() {
        return this.limit;
    }

    public void setLimit(List<DistributionLimitInfo> limit) {
        this.limit = limit;
    }

    /**
     * 允许的国籍
     */
    public String getNationalityInclude() {
        return this.nationalityInclude;
    }

    public void setNationalityInclude(String nationalityInclude) {
        this.nationalityInclude = nationalityInclude;
    }

    /**
     * 不允许的国籍
     */
    public String getNationalityExclude() {
        return this.nationalityExclude;
    }

    public void setNationalityExclude(String nationalityExclude) {
        this.nationalityExclude = nationalityExclude;
    }

    /**
     * 最少预定乘机人数
     */
    public int getMinPassengerCount() {
        return this.minPassengerCount;
    }

    public void setMinPassengerCount(int minPassengerCount) {
        this.minPassengerCount = minPassengerCount;
    }

    /**
     * 最大预定乘机人数
     */
    public int getMaxPassengerCount() {
        return this.maxPassengerCount;
    }

    public void setMaxPassengerCount(int maxPassengerCount) {
        this.maxPassengerCount = maxPassengerCount;
    }

    /**
     * 年龄限制格式：min-max
     */
    public String getAgeRestriction() {
        return this.ageRestriction;
    }

    public void setAgeRestriction(String ageRestriction) {
        this.ageRestriction = ageRestriction;
    }

    /**
     * 子舱位
     */
    public String getSubClass() {
        return this.subClass;
    }

    public void setSubClass(String subClass) {
        this.subClass = subClass;
    }

    /**
     * 主舱位
     */
    public DistributionCabinClassType getClazz() {
        return this.clazz;
    }

    public void setClazz(DistributionCabinClassType clazz) {
        this.clazz = clazz;
    }

    /**
     * 当前运价的当前航段，所有舱位信息
     */
    public List<DistributionProductClassInfo> getProductClassInfoList() {
        return this.productClassInfoList;
    }

    public void setProductClassInfoList(List<DistributionProductClassInfo> productClassInfoList) {
        this.productClassInfoList = productClassInfoList;
    }

    /**
     * 剩余票量
     */
    public int getLaveTicket() {
        return this.laveTicket;
    }

    public void setLaveTicket(int laveTicket) {
        this.laveTicket = laveTicket;
    }

    /**
     * 是否K位
     */
    public boolean getIsKAllow() {
        return this.isKAllow;
    }

    public void setIsKAllow(boolean isKAllow) {
        this.isKAllow = isKAllow;
    }

    /**
     * 和已选择的第一程相匹配时，是否需要拆单（不包括成人、儿童拆单逻辑）
     */
    public boolean getIsNeedSplitter() {
        return this.isNeedSplitter;
    }

    public void setIsNeedSplitter(boolean isNeedSplitter) {
        this.isNeedSplitter = isNeedSplitter;
    }

    /**
     * 国内机票调用退改签接口关键参数
     */
    public String getRemarkSearchKey() {
        return this.remarkSearchKey;
    }

    public void setRemarkSearchKey(String remarkSearchKey) {
        this.remarkSearchKey = remarkSearchKey;
    }

    /**
     * 价格信息
     */
    public List<DistributionSearhFlightPorductPriceInfo> getPriceInfoList() {
        return this.priceInfoList;
    }

    public void setPriceInfoList(List<DistributionSearhFlightPorductPriceInfo> priceInfoList) {
        this.priceInfoList = priceInfoList;
    }

    /**
     * 产品关键参数
     */
    public DistributionProductKeyInfo getProductKeyInfo() {
        return this.productKeyInfo;
    }

    public void setProductKeyInfo(DistributionProductKeyInfo productKeyInfo) {
        this.productKeyInfo = productKeyInfo;
    }

    /**
     * 是否需要调用退改签接口获取信息
     *             只有多舱位查询时才会返回正确结果
     *             列表查询永远是false
     *             因为列表查询还没真正定位运价信息
     */
    public boolean getNeedGetFareRemark() {
        return this.needGetFareRemark;
    }

    public void setNeedGetFareRemark(boolean needGetFareRemark) {
        this.needGetFareRemark = needGetFareRemark;
    }

    /**
     * 行运价包含该的所有航段的主舱 以“+”号分隔，多运价查询时输出
     */
    public String getFlightClassLabel() {
        return this.flightClassLabel;
    }

    public void setFlightClassLabel(String flightClassLabel) {
        this.flightClassLabel = flightClassLabel;
    }

    /**
     * 政策是否不可退
     */
    public boolean getNonRef() {
        return this.nonRef;
    }

    public void setNonRef(boolean nonRef) {
        this.nonRef = nonRef;
    }

    /**
     * 政策是否不可改
     */
    public boolean getNonRer() {
        return this.nonRer;
    }

    public void setNonRer(boolean nonRer) {
        this.nonRer = nonRer;
    }

    /**
     * 所选产品的唯一商品编号,精简化接口扩展了定位参数,需要ShoppingInfoID和ShoppingID一起,跳转列表需要用ShoppingID,跳转填写页需要ShoppingInfoID
     */
    public String getShoppingID() {
        return this.shoppingID;
    }

    public void setShoppingID(String shoppingID) {
        this.shoppingID = shoppingID;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final DistributionPolicyPirceInfo other = (DistributionPolicyPirceInfo)obj;
        return
            Objects.equal(this.ticketAirline, other.ticketAirline) && 
            Objects.equal(this.distributionTravelerEligibilityCodeType, other.distributionTravelerEligibilityCodeType) && 
            Objects.equal(this.airChangeTagList, other.airChangeTagList) && 
            Objects.equal(this.refNote, other.refNote) && 
            Objects.equal(this.shoppingInfoID, other.shoppingInfoID) && 
            Objects.equal(this.rerNote, other.rerNote) && 
            Objects.equal(this.endNote, other.endNote) && 
            Objects.equal(this.note, other.note) && 
            Objects.equal(this.noteCN, other.noteCN) && 
            Objects.equal(this.noteExt, other.noteExt) && 
            Objects.equal(this.baggageNote, other.baggageNote) && 
            Objects.equal(this.baggageNoteCN, other.baggageNoteCN) && 
            Objects.equal(this.containFreeBaggage, other.containFreeBaggage) && 
            Objects.equal(this.hasBaggageService, other.hasBaggageService) && 
            Objects.equal(this.validDate, other.validDate) && 
            Objects.equal(this.fltProductType, other.fltProductType) && 
            Objects.equal(this.productSource, other.productSource) && 
            Objects.equal(this.fltProductChannel, other.fltProductChannel) && 
            Objects.equal(this.distributionFlightProductDescriptionInfo, other.distributionFlightProductDescriptionInfo) && 
            Objects.equal(this.limitTitle, other.limitTitle) && 
            Objects.equal(this.limit, other.limit) && 
            Objects.equal(this.nationalityInclude, other.nationalityInclude) && 
            Objects.equal(this.nationalityExclude, other.nationalityExclude) && 
            Objects.equal(this.minPassengerCount, other.minPassengerCount) && 
            Objects.equal(this.maxPassengerCount, other.maxPassengerCount) && 
            Objects.equal(this.ageRestriction, other.ageRestriction) && 
            Objects.equal(this.subClass, other.subClass) && 
            Objects.equal(this.clazz, other.clazz) && 
            Objects.equal(this.productClassInfoList, other.productClassInfoList) && 
            Objects.equal(this.laveTicket, other.laveTicket) && 
            Objects.equal(this.isKAllow, other.isKAllow) && 
            Objects.equal(this.isNeedSplitter, other.isNeedSplitter) && 
            Objects.equal(this.remarkSearchKey, other.remarkSearchKey) && 
            Objects.equal(this.priceInfoList, other.priceInfoList) && 
            Objects.equal(this.productKeyInfo, other.productKeyInfo) && 
            Objects.equal(this.needGetFareRemark, other.needGetFareRemark) && 
            Objects.equal(this.flightClassLabel, other.flightClassLabel) && 
            Objects.equal(this.nonRef, other.nonRef) && 
            Objects.equal(this.nonRer, other.nonRer) && 
            Objects.equal(this.shoppingID, other.shoppingID);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.ticketAirline);
        result = 31 * result + Objects.hashCode(this.distributionTravelerEligibilityCodeType);
        result = 31 * result + Objects.hashCode(this.airChangeTagList);
        result = 31 * result + Objects.hashCode(this.refNote);
        result = 31 * result + Objects.hashCode(this.shoppingInfoID);
        result = 31 * result + Objects.hashCode(this.rerNote);
        result = 31 * result + Objects.hashCode(this.endNote);
        result = 31 * result + Objects.hashCode(this.note);
        result = 31 * result + Objects.hashCode(this.noteCN);
        result = 31 * result + Objects.hashCode(this.noteExt);
        result = 31 * result + Objects.hashCode(this.baggageNote);
        result = 31 * result + Objects.hashCode(this.baggageNoteCN);
        result = 31 * result + Objects.hashCode(this.containFreeBaggage);
        result = 31 * result + Objects.hashCode(this.hasBaggageService);
        result = 31 * result + Objects.hashCode(this.validDate);
        result = 31 * result + Objects.hashCode(this.fltProductType);
        result = 31 * result + Objects.hashCode(this.productSource);
        result = 31 * result + Objects.hashCode(this.fltProductChannel);
        result = 31 * result + Objects.hashCode(this.distributionFlightProductDescriptionInfo);
        result = 31 * result + Objects.hashCode(this.limitTitle);
        result = 31 * result + Objects.hashCode(this.limit);
        result = 31 * result + Objects.hashCode(this.nationalityInclude);
        result = 31 * result + Objects.hashCode(this.nationalityExclude);
        result = 31 * result + Objects.hashCode(this.minPassengerCount);
        result = 31 * result + Objects.hashCode(this.maxPassengerCount);
        result = 31 * result + Objects.hashCode(this.ageRestriction);
        result = 31 * result + Objects.hashCode(this.subClass);
        result = 31 * result + Objects.hashCode(this.clazz);
        result = 31 * result + Objects.hashCode(this.productClassInfoList);
        result = 31 * result + Objects.hashCode(this.laveTicket);
        result = 31 * result + Objects.hashCode(this.isKAllow);
        result = 31 * result + Objects.hashCode(this.isNeedSplitter);
        result = 31 * result + Objects.hashCode(this.remarkSearchKey);
        result = 31 * result + Objects.hashCode(this.priceInfoList);
        result = 31 * result + Objects.hashCode(this.productKeyInfo);
        result = 31 * result + Objects.hashCode(this.needGetFareRemark);
        result = 31 * result + Objects.hashCode(this.flightClassLabel);
        result = 31 * result + Objects.hashCode(this.nonRef);
        result = 31 * result + Objects.hashCode(this.nonRer);
        result = 31 * result + Objects.hashCode(this.shoppingID);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("ticketAirline", ticketAirline)
            .add("distributionTravelerEligibilityCodeType", distributionTravelerEligibilityCodeType)
            .add("airChangeTagList", airChangeTagList)
            .add("refNote", refNote)
            .add("shoppingInfoID", shoppingInfoID)
            .add("rerNote", rerNote)
            .add("endNote", endNote)
            .add("note", note)
            .add("noteCN", noteCN)
            .add("noteExt", noteExt)
            .add("baggageNote", baggageNote)
            .add("baggageNoteCN", baggageNoteCN)
            .add("containFreeBaggage", containFreeBaggage)
            .add("hasBaggageService", hasBaggageService)
            .add("validDate", validDate)
            .add("fltProductType", fltProductType)
            .add("productSource", productSource)
            .add("fltProductChannel", fltProductChannel)
            .add("distributionFlightProductDescriptionInfo", distributionFlightProductDescriptionInfo)
            .add("limitTitle", limitTitle)
            .add("limit", limit)
            .add("nationalityInclude", nationalityInclude)
            .add("nationalityExclude", nationalityExclude)
            .add("minPassengerCount", minPassengerCount)
            .add("maxPassengerCount", maxPassengerCount)
            .add("ageRestriction", ageRestriction)
            .add("subClass", subClass)
            .add("clazz", clazz)
            .add("productClassInfoList", productClassInfoList)
            .add("laveTicket", laveTicket)
            .add("isKAllow", isKAllow)
            .add("isNeedSplitter", isNeedSplitter)
            .add("remarkSearchKey", remarkSearchKey)
            .add("priceInfoList", priceInfoList)
            .add("productKeyInfo", productKeyInfo)
            .add("needGetFareRemark", needGetFareRemark)
            .add("flightClassLabel", flightClassLabel)
            .add("nonRef", nonRef)
            .add("nonRer", nonRer)
            .add("shoppingID", shoppingID)
            .toString();
    }
}