/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctrip.soa.global.api.flight.union_searchflightsws.v1;

import com.ctriposs.baiji.rpc.common.apidoc.FieldDoc;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

@JsonAutoDetect(getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE, isGetterVisibility = Visibility.NONE)
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SearchContextType", propOrder = {
    "allClassesSearchToken",
    "routeSearchControl",
    "partitionSearchControl"
})
@SuppressWarnings("all")
public class SearchContextType  {

    private static final long serialVersionUID = 1L;

    public SearchContextType(
        String allClassesSearchToken, 
        RouteSearchControlType routeSearchControl, 
        PartitionSearchControlType partitionSearchControl) {
        this.allClassesSearchToken = allClassesSearchToken;
        this.routeSearchControl = routeSearchControl;
        this.partitionSearchControl = partitionSearchControl;
    }

    public SearchContextType() {
    }

    @FieldDoc("All classes search token (only TSK is using temporarily)")
    @JsonProperty("AllClassesSearchToken")
    @XmlElement(name = "AllClassesSearchToken")
    private String allClassesSearchToken;

    @FieldDoc("Segmentation/reverse control based on route")
    @JsonProperty("RouteSearchControl")
    @XmlElement(name = "RouteSearchControl")
    private RouteSearchControlType routeSearchControl;

    @FieldDoc("Partition search control")
    @JsonProperty("PartitionSearchControl")
    @XmlElement(name = "PartitionSearchControl")
    private PartitionSearchControlType partitionSearchControl;

    /**
     * All classes search token (only TSK is using temporarily)
     */
    public String getAllClassesSearchToken() {
        return this.allClassesSearchToken;
    }

    public void setAllClassesSearchToken(String allClassesSearchToken) {
        this.allClassesSearchToken = allClassesSearchToken;
    }

    /**
     * Segmentation/reverse control based on route
     */
    public RouteSearchControlType getRouteSearchControl() {
        return this.routeSearchControl;
    }

    public void setRouteSearchControl(RouteSearchControlType routeSearchControl) {
        this.routeSearchControl = routeSearchControl;
    }

    /**
     * Partition search control
     */
    public PartitionSearchControlType getPartitionSearchControl() {
        return this.partitionSearchControl;
    }

    public void setPartitionSearchControl(PartitionSearchControlType partitionSearchControl) {
        this.partitionSearchControl = partitionSearchControl;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final SearchContextType other = (SearchContextType)obj;
        return
            Objects.equal(this.allClassesSearchToken, other.allClassesSearchToken) && 
            Objects.equal(this.routeSearchControl, other.routeSearchControl) && 
            Objects.equal(this.partitionSearchControl, other.partitionSearchControl);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + Objects.hashCode(this.allClassesSearchToken);
        result = 31 * result + Objects.hashCode(this.routeSearchControl);
        result = 31 * result + Objects.hashCode(this.partitionSearchControl);

        return result;
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add("allClassesSearchToken", allClassesSearchToken)
            .add("routeSearchControl", routeSearchControl)
            .add("partitionSearchControl", partitionSearchControl)
            .toString();
    }
}